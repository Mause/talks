#> <c>// If you can read this, yay!
#> <s>123456789 123456789 123456789 12</s>
#> > console.log("Hello World");
#> Hello World
#> <h>!#/usr/bin/env ruby</h>
#> > (0..3).each {|c| puts c}
#> 0
#> 1
#> 2
#> 3
#> => 0..3  <c>// Console is 11x32 </c>
---

<br>
<br>
# JavaScript is Awe-ful
<br>
@ footer.svg
---

#= House Keeping
---
#= Audience<br>Participation
---
<br><br>
#> <c>// This is the size most of the
#> <c>// code will be shown in</c>
#> <h>// If you cannot read this,
#> <h>// please change seats</h>
<br>
<pre><code>
Some less important code will be shown in this size
It's optimal you can also read this, but this is not a requirement<br>
</pre></code>
---
#> > input JavaScript code
#> output result
#> > input
#> output
#> > <c>// comments</c>
#> > "Some <h>highlights</h>"
#> > <c>// Assume JavaScript unless</c>
#> > <c>// otherwise advised</c>
---
#= Let's get started!
---
#= Hi!
Note: Tapestry and Cooking and Yelling
---

#= Global Variables
---
<p></p>
#> > ans
---
#>  > ans = "";
#>- > function question() {<br>> &nbsp; var ans = 42;<br>> &nbsp; return ans;<br>> }
#>- > console.log(ans);
#>- ""
#>- > console.log(question());
#>- 42
#>- > console.log(ans);
#>- ""
---
<p></p>
#> > ans = "";
#> > function question() {<br>> &nbsp; <s>var</s> ans = 42; <br>> &nbsp; return ans;<br>> }
#> > console.log(ans);
#> ""
#> > console.log(question());
#> 42
#> > console.log(ans);
#> 42
---
#= Duck Typing
Note: if it looks like a duck and sounds like a duck, it's a duck.
---
#>  > 4 + 2
#>- 6
#>- > 4 - 2
#>- 2
#>- > "4" - 2
#>- 2
#>- > "4" + 2
#>- "42"
---
#= Equality
---
#>  > 0 ==&nbsp; false
#>- true
#>- > 1 == &nbsp;"1"
#>- true
#>- > 0 === false
#>- false
#>- > 1 === "1"
#>- false
---
#= Commutative Law
---
#> > {} || {}
#>- {}
#>- > null || {}
#>- {}
#>- > {} || null
#>- Unexpected token ||


---
#= Arrays and Objects
---
#> > [] + []
#>- ""
#>- > [] + {}
#>- [object Object]
#>- > {} + []
#>- 0
#>- > {} + {}
#>- NaN

Note: Commutative law
---

@ wat.jpg
<span class="dasfoot"><a href="https://www.destroyallsoftware.com/talks/wat">destroyallsoftware.com</a></span>

---

@ mini_wat.jpg

<span class="dasfoot"><a href="https://500px.com/photo/140476163/wat-by-edunham">wat, Emily Dunham, CC-BY-SA</a></span>
---
#= Why?
Note: why is javascript so awful
---

#= JavaScript History<br>in 30 words or less
Note: I don't have time to tell the entire history of javascript

Check out the YUI Theatre series

For more, see "Crockford on JavaScript"

---

###= In 1995, JavaScript was developed in 10 days
### by Brendan Eich for Netscape
### to offer a lightweight version of Java
### in order to compete for users with Microsoft.

Note: Let's step through that
---


###= In 1995, JavaScript was developed in 10 days
### &nbsp;
### &nbsp;
### &nbsp;
Note: awfully short development time

just by that alone could explain things.
---
###= In 1995, JavaScript was developed in 10 days
### by Brendan Eich for Netscape
### &nbsp;
### &nbsp;
Note:
Eich originally wanted to make scheme

Sure, they said

Oh wait, that's scheme, that's gross, don't do that.
---
#> > (define hello-world
#> >&nbsp; (lambda ()
#> >&nbsp; &nbsp; (begin
#> >&nbsp; &nbsp; &nbsp; (write ‘Hello-World)
#> >&nbsp; &nbsp; )
#> >&nbsp; )
#> > )
#> >
#> > (hello-world)
#> Hello-World
#>
Note: We could have written in the browser like this
---
###= In 1995, JavaScript was developed in 10 days
### by Brendan Eich for Netscape
### &nbsp;
### &nbsp;

Note: For user adoption, maybe it wasn't the best
---

###= In 1995, JavaScript was developed in 10 days
### by Brendan Eich for Netscape
### to offer a lightweight version of Java
### &nbsp;


Note: so Eich made it look like Java, basing it a bit on Scheme and Self as well

Originally called LiveScript. Changed to JavaScript because it was kinda based on int

But Sun owned the trademark, so Sun owned the JavaScript trademark

Which is now owned by Oracle


Java could have been the language of the web

Java Applets

---

###= In 1995, JavaScript was developed in 10 days
### by Brendan Eich for Netscape
### to offer a lightweight version of Java
### in order to compete for users with Microsoft.

Note: Mosaic split into NetScape in SpyGlass

Netscape says: "we're going to wipe out MS!"

MS says: "whoops, buying spyglass"

race was on to develop the scriting language to make the web better

Because trademark, MS reverse engineered JS, called it JScript

---

#= JavaScript™

<span class="dasfoot"><a href="http://tsdr.uspto.gov/#caseNumber=75026640&caseType=SERIAL_NO&searchType=statusSearch">US Trademark &#35;75026640</a></span>
Note:

---

#= ECMAScript
### A general purpose, cross-platform programming language

Note: Because of some fun issues, Tim Berners Lee and W3C wouldn't do the standard

TBL was apparently upset that Netscape took his simple design and made it silly

with things like images and formatting



They ended up at the

European Computer Manufacturers Association

They couldn't think of a better name

Working title: ECMA Script (ecc-ma)


---

#= The most<br>popular language.<br>Ever.
Note: what percentage of the world uses the internet?

I posit that there are more uses of JS than any other lanaguage ever

What percentage of the internet uses JS?

Given this user base, there are more developers of JS than any other language

Butt-loads of complaints

It may also be the most complained about language
But not without some reason

---
#= wat

Note: 

aka footguns

Things you can shoot yourself with in the foot

---

#= Global Variables
Note: Incidently, first listing in The Good Parts - Appendix A - The Awful Parts
---

<p></p>
#> > ans = "";
#> > function question() {<br>> &nbsp; var ans = 42; <br>> &nbsp; return ans;<br>> }
#> > console.log(ans);
#> ""
#> > console.log(question());
#> 42
#> > console.log(ans);
#> ""
---
<p></p>
#> > ans = ""; <c>// global
#> > function question() {<br>> &nbsp; var ans = 42; <c> // local</c> <br>> &nbsp; return ans;<br>> }
#> > console.log(ans);
#> ""
#> > console.log(question());
#> 42
#> > console.log(ans);
#> ""
---
#> <c>//ruby</c>
#> <h>@</h>ans = 42;
#>
#> <c>//python</c>
#> <h>global</h> ans = 42;
#>
#> <c>//java
#> <h>public</h> static ans = 42;
Note: Because every other language has locals by default
---
#= Overloaded<br>`+` operand
---
<p></p>
#>  > 4 + 2
#> 6
#> > 4 - 2
#> 2
#> > "4" - 2
#> 2
#> > "4" + 2
#> "42"
---
<p></p>
#>  > 4 + 2
#> 6
#> > 4 - 2
#> 2
#> > "4" - 2
#> 2 <c>&nbsp;&nbsp; // type -> integer</c>
#> > "4" + 2
#> "42"<c> // type -> string</c>
Note: `+` for both additon and concatenation
---

#= Equality<br>and<br>Type Coersion
---
<p></p>
#> > 0 ==&nbsp; false
#> true
#> > 0 === false
#> false
#> > 1 == &nbsp;"1"
#> true
#> > 1 === "1"
#> false
---
<p></p>
#> > 0 ==&nbsp; false
#> true
#> > 0 === false
#> false
#> > 1 == &nbsp;"1" <c>// equality 
#> true
#> > 1 === "1" <c>// equality without</c>
#> false &nbsp; &nbsp; &nbsp; <c>// type coersion</c>
#>- <h>// always use ===</h>

Note: This was picked up v. early by Brendan Eich

But because legacy, the standards committee didn't accept the change to `==`

forced creation of `===`
---
#= `NaN`
Note: More gotchas, Combination of original 'Bad Parts', 'Awful Parts', and some new Fun
---
#> > typeof NaN
#> "number"
#>- > NaN === NaN
#>- false
#>- > NaN !== NaN
#>- true
#>- > isFinite(NaN)
#>- false
#>- <h>// if typeof a === "number" <br> &nbsp; &nbsp;&nbsp; && isFinite(a)</h>
---
#= `parseInt`
---
#> > parseInt("42")
#>- 42
#>- > parseInt("42 Wallaby Way")
#>- 42
#>- > parseInt("04")
#>- 4
#>- > parseInt("08")
#>- 0
---
<p></p>
#> > parseInt("42")
#> 42
#> > parseInt("42 Wallaby Way")
#> 42
#> > parseInt("04") <c>// radix 10</c>
#> 4
#> > parseInt("08") <c>// octal</c> 
#> 0
---
#= `Number`
---
#> > 4 + 2
#>- 6
#>- > 40 + 20
#>- 60
#>- > 0.4 + 0.2
#>- 0.6000000000000001
#>- <c>// All Number in JavaScript<br>// are IEEE-754 floats</c>
Note: All numbers are IEEE 754 floats

Fix this by dealing with 'round' numbers. Money - work in cents
---
#= Extended<br>Character Set
---
#> > "abc".split("")
#>- ["a","b","c"]
#>- > "<img src="pictures/penguin.svg" class="e" style="margin: 0"><img src="pictures/koala.svg" style="margin: 0" class="e">".split("")
#>- ["�","�","�","�"]
#>- > Array.from("<img src="pictures/penguin.svg" class="e" style="margin: 0"><img src="pictures/koala.svg" style="margin: 0" class="e">")
#>- ["<img src="pictures/penguin.svg" class="e" style="margin: 0">","<img src="pictures/koala.svg" style="margin: 0" class="e">"]

Note: Unicode extended characterset

Javascript was created before unicode was super popular, so some parts don't understand extended characters

split doesn't but array.from does (polyfill?)
---

#= This thing
##= `++[[]][+[]]+[+[]]`

---
#> > ++[[]][+[]]+[+[]]
#>- 10

---
#> > []
#>- ""
#>- > +[] <c>&nbsp; // +""</c>
#>- 0
#>- > [[]] <c> // [""] </c>
#>- ""
---
#> > [[]][+[]] <c> &nbsp;// [""][0]</c>
#>- ""
#>- > +[[]][+[]] <c> // +""
#>- 0
#>- > ++[[]][+[]] <c>// ++0 </c>
#>- 1
#>- > ++[[]][+[]] <h>+</h> [+[]]
#>- 10

Note: pre-increment only works on some objects, not directly on number literals
---

<pre><code>
[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(
!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]
+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[]
)[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!
+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!
+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]
]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]
+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![
]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[
])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])
[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[
!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[
]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((![]+[])[!+[]+!+[]]+([][(![]+[
])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[
+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[
]]+(![]+[])[+!+[]]+[!+[]+!+[]]+[+[]]+[+!+[]]+[!+[]+!+[]+!+[]+!+[]+
!+[]+!+[]+!+[]])()
</code></pre>

#>- lca2017

<span class="dasfoot"><a href="http://www.jsfuck.com/">esoteric javascript, @aemkei</a></span>
---
#= Arrays are Objects
## Kinda.

Note: they are special, with integer keys and special sugar. 
See eariler partial working of addressing array keys
---

#> > typeof { a: "b" }
#>- "object"
#>- > typeof ["a","b"]
#>- "object"
---
#= `typeof`
Note: Big typeof
---
#> > typeof Object()
#>- "object"
#>- > typeof Number()
#>- "number"
#>- > typeof String()
#>- "string"
#>- > typeof Boolean()
#>- "boolean"
#>- > typeof null
#>- "object"
Note: even JScript dutifully reverse engineered this error

It's a bug
---
<p></p>
#> > typeof Object() 
#> "object"  <h> // JSVAL_OBJECT &nbsp;  0x0</h>
#> > typeof Number()
#> "number"
#> > typeof String()
#> "string" <h> // JSVAL_STRING &nbsp; 0x4</h>
#> > typeof Boolean()
#> "boolean" <h>// JSVAL_BOOLEAN &nbsp;0x6</h>
#> > typeof null
#> "object"&nbsp; <c>//  0x00 pointer  </c>

---
<pre><code><c>// source/js/src/jsapi.c</c><br>
JS_TypeOfValue(JSContext *cx, jsval v) {
&nbsp; &nbsp; if (JSVAL_IS_VOID(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_VOID;
&nbsp; &nbsp; } else if (JSVAL_IS_OBJECT(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; if (...) {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_FUNCTION;
&nbsp; &nbsp; &nbsp; &nbsp; } else {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_OBJECT;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; } else if (JSVAL_IS_NUMBER(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_NUMBER;
&nbsp; &nbsp; } else if (JSVAL_IS_STRING(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_STRING;
&nbsp; &nbsp; } else if (JSVAL_IS_BOOLEAN(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_BOOLEAN;
&nbsp; &nbsp; }
&nbsp; &nbsp; return type;
}
</pre></code>


<span class="dasfoot"><a href="http://mxr.mozilla.org/classic/source/js/src/jsapi.h">jsapi from October 1996</a></span>
---
<pre><code><c>// source/js/src/jsapi.c</c><br>
JS_TypeOfValue(JSContext *cx, jsval v) {
&nbsp; &nbsp; <h>if</h> (JSVAL_IS_VOID(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_VOID;
&nbsp; &nbsp; } <h>else if</h> (JSVAL_IS_OBJECT(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; <h>if</h> (...) {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_FUNCTION;
&nbsp; &nbsp; &nbsp; &nbsp; } <h>else</h> {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_OBJECT;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; } <h>else if</h> (JSVAL_IS_NUMBER(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_NUMBER;
&nbsp; &nbsp; } <h>else if</h> (JSVAL_IS_STRING(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_STRING;
&nbsp; &nbsp; } <h>else if</h> (JSVAL_IS_BOOLEAN(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_BOOLEAN;
&nbsp; &nbsp; }
&nbsp; &nbsp; return type;
}
</pre></code>


<span class="dasfoot"><a href="http://mxr.mozilla.org/classic/source/js/src/jsapi.h">jsapi from October 1996</a></span>
---
<pre><code><c>// source/js/src/jsapi.c</c><br>
JS_TypeOfValue(JSContext *cx, jsval v) {
&nbsp; &nbsp; if (<h>JSVAL_IS_VOID(v)</h>) { <c>// v == JSVAL_VOID</c>
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_VOID;
&nbsp; &nbsp; } else if (JSVAL_IS_OBJECT(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; if (...) {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_FUNCTION;
&nbsp; &nbsp; &nbsp; &nbsp; } else {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_OBJECT;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; } else if (JSVAL_IS_NUMBER(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_NUMBER;
&nbsp; &nbsp; } else if (JSVAL_IS_STRING(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_STRING;
&nbsp; &nbsp; } else if (JSVAL_IS_BOOLEAN(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_BOOLEAN;
&nbsp; &nbsp; }
&nbsp; &nbsp; return type;
}
</pre></code>
<span class="dasfoot"><a href="http://mxr.mozilla.org/classic/source/js/src/jsapi.h">jsapi from October 1996</a></span>
---
<pre><code><c>// source/js/src/jsapi.c</c><br>
JS_TypeOfValue(JSContext *cx, jsval v) {
&nbsp; &nbsp; if (JSVAL_IS_VOID(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_VOID;
&nbsp; &nbsp; } else if (<h>JSVAL_IS_OBJECT(v)</h>) { <c>// JSVAL_TAG(v) == JSVAL_OBJECT</c>
&nbsp; &nbsp; &nbsp; &nbsp; if (...) {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_FUNCTION;
&nbsp; &nbsp; &nbsp; &nbsp; } else {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_OBJECT;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; } else if (JSVAL_IS_NUMBER(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_NUMBER;
&nbsp; &nbsp; } else if (JSVAL_IS_STRING(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_STRING;
&nbsp; &nbsp; } else if (JSVAL_IS_BOOLEAN(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_BOOLEAN;
&nbsp; &nbsp; }
&nbsp; &nbsp; return type;
}
</pre></code>


<span class="dasfoot"><a href="http://mxr.mozilla.org/classic/source/js/src/jsapi.h">jsapi from October 1996</a></span>
---
<pre><code><c>// source/js/src/jsapi.c</c><br>
JS_TypeOfValue(JSContext *cx, jsval v) {
&nbsp; &nbsp; if (JSVAL_IS_VOID(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_VOID;
&nbsp; &nbsp; } else if (JSVAL_IS_OBJECT(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; if (...) { <c>// Excuse me, are you a function?</c>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_FUNCTION;
&nbsp; &nbsp; &nbsp; &nbsp; } else {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_OBJECT;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; } else if (JSVAL_IS_NUMBER(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_NUMBER;
&nbsp; &nbsp; } else if (JSVAL_IS_STRING(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_STRING;
&nbsp; &nbsp; } else if (JSVAL_IS_BOOLEAN(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_BOOLEAN;
&nbsp; &nbsp; }
&nbsp; &nbsp; return type;
}
</pre></code>


<span class="dasfoot"><a href="http://mxr.mozilla.org/classic/source/js/src/jsapi.h">jsapi from October 1996</a></span>
---
<pre><code><c>// source/js/src/jsapi.c</c><br>
JS_TypeOfValue(JSContext *cx, jsval v) {
&nbsp; &nbsp; if (JSVAL_IS_VOID(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_VOID;
&nbsp; &nbsp; } else if (JSVAL_IS_OBJECT(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; if (...) {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_FUNCTION;
&nbsp; &nbsp; &nbsp; &nbsp; } <h>else</h> {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_OBJECT;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; } else if (JSVAL_IS_NUMBER(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_NUMBER;
&nbsp; &nbsp; } else if (JSVAL_IS_STRING(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_STRING;
&nbsp; &nbsp; } else if (JSVAL_IS_BOOLEAN(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_BOOLEAN;
&nbsp; &nbsp; }
&nbsp; &nbsp; return type;
}
</pre></code>


<span class="dasfoot"><a href="http://mxr.mozilla.org/classic/source/js/src/jsapi.h">jsapi from October 1996</a></span>
---
<pre><code><c>// source/js/src/jsapi.c</c><br>
JS_TypeOfValue(JSContext *cx, jsval v) {
&nbsp; &nbsp; if (JSVAL_IS_VOID(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_VOID;
&nbsp; &nbsp; } else if (JSVAL_IS_OBJECT(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; if (...) {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_FUNCTION;
&nbsp; &nbsp; &nbsp; &nbsp; } else {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <h>type = JSTYPE_OBJECT</h>;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; } else if (JSVAL_IS_NUMBER(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_NUMBER;
&nbsp; &nbsp; } else if (JSVAL_IS_STRING(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_STRING;
&nbsp; &nbsp; } else if (JSVAL_IS_BOOLEAN(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_BOOLEAN;
&nbsp; &nbsp; }
&nbsp; &nbsp; return type;
}
</pre></code>


<span class="dasfoot"><a href="http://mxr.mozilla.org/classic/source/js/src/jsapi.h">jsapi from October 1996</a></span>

---
<pre><code><c>// source/js/src/jsapi.c</c><br>
JS_TypeOfValue(JSContext *cx, jsval v) {
&nbsp; &nbsp; if (JSVAL_IS_VOID(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_VOID;
&nbsp; &nbsp; } else if (JSVAL_IS_OBJECT(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; if (...) {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_FUNCTION;
&nbsp; &nbsp; &nbsp; &nbsp; } else {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_OBJECT;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; } else if (JSVAL_IS_NUMBER(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_NUMBER;
&nbsp; &nbsp; } else if (JSVAL_IS_STRING(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_STRING;
&nbsp; &nbsp; } else if (JSVAL_IS_BOOLEAN(v)) {
&nbsp; &nbsp; &nbsp; &nbsp; type = JSTYPE_BOOLEAN;
&nbsp; &nbsp; }
&nbsp; &nbsp; <h>return type</h>;
}
</pre></code>
<span class="dasfoot"><a href="http://mxr.mozilla.org/classic/source/js/src/jsapi.h">jsapi from October 1996</a></span>
---
##= Yes, this is a bug.
##- This is a old, known bug.
---
#= Backwards<br>Compatibility

Note: JS = most popular language

Most users

Most impact

Biggest user base *ever*. Backward compatibility is not optional

The internet would *break*

And if that's not enough, we have to think about more things

---
#= Security
Note: on top of the things you know JS does

you have to worry about the things that you *really* don't want it to do
---

##= Cross Site Scripting
###= XSS

---

##= Cross Site Request Forgery
###= CSRF

Note: within scope, but not strictly JS
---

###= `document.execCommand('copy');`

<span class="dasfoot"><a href="https://github.com/dxa4481/Pastejacking/blob/master/index.html">dxa4481/pastejacking</a></span>
Note: New line in a terminal will auto execute
---
#= `eval`

Note: executing arbitary code.

---
<br><br>
<pre><code style="overflow: hidden; width: 100%; white-space: pre-wrap"><h>eval(</h>function(p,a,c,k,e,d){e&#61;function(c){return c.toString(36)};if(!''.replace(/^/,String)){while(c--){d[c.toString(a)]&#61;k[c]||c.toString(a)}k&#61;[function(e){return d[e]}];e&#61;function(){return'\\w+'};c&#61;1};while(c--){if(k[c]){p&#61;p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c])}}return p}('8 3&#61;["\\7\\1\\6\\4\\2\\1\\2\\5\\9\\a\\4\\2\\b\\1\\d"]c(3[0])',14,14,<br>'|x61|x20|_0xfb59|x65|x6E|x76|x48|var|x69|x63|x64|alert|x79'<br>.split('|'),0,{})<h>)</h>
</pre></code>

#>- alert("Have a nice day")
Note: base64_encode in php is similar
---
#= 😢
Note:
so, that's what javascript can do. it's powerful, and scary. what if you say
---

#= So don't use<br>JavaScript
---

###= Image Sliders
### Modals
### Light Boxes
### Form Validation
### File Uploads
### ... all with HTML/CSS only.

<span class="dasfoot"><a href="http://youmightnotneedjs.com/">You Might Not Need JavaScript.com</a></span>
---
#= Using JavaScript<br>without JavaScript
---
#= Pick any language

<span class="dasfoot"><a href="https://github.com/jashkenas/coffeescript/wiki/list-of-languages-that-compile-to-js">List of languages that compile to JS</a></span>
---

###- Ruby: Opal, Red, ..
###- Python: Skulpt, Brython, ..
###- Perl: Perlito, p2js, ..
###- Haskell: ghcjs, haste, ..
###- Go: GopherJS, ..
###- PHP: Uniter, phype, ..
###- Cobol: CobolScript
###- C: Emscripten
---
<video width="720" height="600" controls="controls"><source src="pictures/skifree.mp4" type="video/mp4" /></video>
#v <a href="https://archive.org/details/win3_WINSKI">https://archive.org/details/win3_WINSKI</a>
Note: Yes, that's windows 95 running in my browser from 1995
---
#= Slightly different approaches
---
#= Batavia
@ pybee.svg
---
#= JavaScript<br>outside the browser
---
#= node.js
Note: serverside js

runtime environment, not a framework

runs on the V8 engine (next slide)
---

#= V8<br>JavaScript Engine
Note:

Chromium Browser engine. 


Open source

 'Isomorphic JavaScript' slash 'Universal javascript'
---
#= V8 wat
---
<pre><code>'use strict';

function add(x, y) {
<c style="font-weight:normal">&nbsp; // I am the very model of a modern Major-General
&nbsp; // I've information vegetable, animal, and mineral
&nbsp;  // I know the kings of England, and I quote the fights historical
&nbsp;  // From Marathon to Waterloo, in order categorical
&nbsp;  // I'm very well acquainted, too, with matters mathematical
&nbsp;  // I understand equations, both the simple and quadratical
&nbsp;  // About binomial theorem I'm teeming with a lot o' news
&nbsp;  // With many cheerful facts about the square of the hypotenuse
&nbsp;  // I'm very good at integral and differential calculus
&nbsp;  // I know the scientific names of beings animalculous
</c>
&nbsp;  return(x + y);
}

for (let i = 0; i < 500000000; i++) {
&nbsp; if (add(i, i++) < 5) { <c>/* */</c> }
}
</code></pre>

#>- $ time -p node general.js<br>real 1.91

#v <a href="https://top.fse.guru/nodejs-a-quick-optimization-advice-7353b820c92e">top.fse.guru</a>
---
<pre><code>'use strict';

function add(x, y) {
<c style="font-weight:normal">&nbsp; // I am the very model of a modern Major-General
&nbsp; // I've information vegetable, animal, and mineral
&nbsp;  // I know the kings of England, and I quote the fights historical
&nbsp;  // From Marathon to Waterloo, in order categorical
&nbsp;  // I'm very well acquainted, too, with matters mathematical
&nbsp;  // I understand equations, both the simple and quadratical
&nbsp;  // About binomial theorem I'm teeming with a lot o' news
&nbsp;  // With many cheerful facts about the square of the hypotenuse
&nbsp;  // I'm very good at integral and differential calculus
&nbsp;  // I know the scientific names of beings animalculous
</c>
&nbsp;  return(x + y);
}

for (let i = 0; i < 500000000; i++) {
&nbsp; if (add(i, i++) < 5) { <c>/* */</c> }
}
</code></pre>

#v <a href="https://top.fse.guru/nodejs-a-quick-optimization-advice-7353b820c92e">top.fse.guru</a>


Note: blank for flicking
---
<pre><code>'use strict';

function add(x, y) {
<c style="font-weight:normal">&nbsp; // I am the very model of a modern Major-General
&nbsp; // I've information vegetable, animal, and mineral
&nbsp;  // I know the kings of England, and I quote the fights historical
&nbsp;  // From Marathon to Waterloo, in order categorical
&nbsp;  // I'm very well acquainted, too, with matters mathematical
&nbsp;  // I understand equations, both the simple and quadratical
&nbsp;  // About binomial theorem I'm teeming with a lot o' news
&nbsp;  // With many cheerful facts about the square of the hypotenuse
&nbsp;  // I'm very good at integral and differential calculus
&nbsp; 
</c>
&nbsp;  return(x + y);
}

for (let i = 0; i < 500000000; i++) {
&nbsp; if (add(i, i++) < 5) { <c>/* */</c> }
}
</code></pre>

#>- $ time -p node general.js<br>real 0.77<c> &nbsp;# vs 1.91</c>


#v <a href="https://top.fse.guru/nodejs-a-quick-optimization-advice-7353b820c92e">top.fse.guru</a>

Note: What's going to happen? any change?

More than twice as fast
---
#= Server Side Security
---

##= "The Little Doctor"
### Proof of Concept cross-platform XSS worm framework 

<span class="dasfoot"><a href="https://github.com/infosec-au/little-doctor/">Source Code, GitHub</a> <a href="https://www.youtube.com/watch?v=jMKmPW99TFQ">Video</a></span>
Note: Demo'd at KiwiCon X

Rocket Chat is all made in Javascript frames in the mobile and desktop app

So the same vulnerability of being able to run the code....

---
#= Package<br>Management
---

#= <img src="pictures/npm.png">
---

#= <img src="pictures/wdu.png">
Note: Wombat Developers Union
---
#= <img src="pictures/wombatlogo.png">
---
@^ WOMBAT.png
---

#= <img src="pictures/npm.png">

Note: Node package manager

---
#= left-pad
---
#> <c>//stevemao/left-pad:index.js</c>
#> module.exports = leftpad;
#> function leftpad (str, len, ch){
#> &nbsp; str = String(str);
#> &nbsp; var i = -1;
#> &nbsp; if (!ch && ch !== 0) ch = ' ';
#> &nbsp; len = len - str.length;
#> &nbsp; while (++i < len) { 
#> &nbsp; &nbsp; &nbsp; str = ch + str; }
#> &nbsp; return str;
#> }

---
#> <c>//stevemao/left-pad:index.js</c>
#> module.exports = leftpad;
#> function leftpad (str, len, ch){
#> &nbsp; str = String(str);
#> &nbsp; var i = -1;
#> &nbsp; if (<h>!ch && ch !== 0</h>) <h>ch = ' '</h>;
#> &nbsp; len = len - str.length;
#> &nbsp; while (++i < len) { 
#> &nbsp; &nbsp; &nbsp; str = ch + str; }
#> &nbsp; return str;
#> }

---
#> <c>//stevemao/left-pad:index.js</c>
#> module.exports = leftpad;
#> function leftpad (str, len, ch){
#> &nbsp; str = String(str);
#> &nbsp; var i = -1;
#> &nbsp; if (!ch && ch !== 0) ch = ' ';
#> &nbsp; len = <h>len - str.length</h>;
#> &nbsp; while (++i < len) { 
#> &nbsp; &nbsp; &nbsp; str = ch + str; }
#> &nbsp; return str;
#> }
---
#> <c>//stevemao/left-pad:index.js</c>
#> module.exports = leftpad;
#> function leftpad (str, len, ch){
#> &nbsp; str = String(str);
#> &nbsp; var i = -1;
#> &nbsp; if (!ch && ch !== 0) ch = ' ';
#> &nbsp; len = len - str.length;
#> &nbsp; while <h>(++i < len)</h> { 
#> &nbsp; &nbsp; &nbsp; str = ch + str; }
#> &nbsp; return str;
#> }

---
#> PHP_FUNCTION(str_pad) {
#> &nbsp; char &ast;input;
#> &nbsp; int  input_len;
#> &nbsp; long &nbsp;pad_length;
#> &nbsp; char &ast;pad_str_val = " ";
#> &nbsp;  <c>/&ast; ... &ast;/</c>
#> &nbsp; num_pad_chars = 
#> &nbsp; &nbsp; &nbsp;pad_length - input_len;
#> &nbsp;  <c>/&ast; ... &ast;/</c>

<span class="dasfoot"><a href="https://github.com/php/php-src/blob/PHP-5.6/ext/standard/string.c">php 5.6 - ext/standard/string.c</a></span>
---
#> PHP_FUNCTION(str_pad) {
#> &nbsp; char &ast;input;
#> &nbsp; int  input_len;
#> &nbsp; long &nbsp;pad_length;
#> &nbsp; char <h>&ast;pad_str_val = " ";</h>
#> &nbsp;  <c>/&ast; ... &ast;/</c>
#> &nbsp; num_pad_chars = 
#> &nbsp; &nbsp; &nbsp;pad_length - input_len;
#> &nbsp;  <c>/&ast; ... &ast;/</c>

<span class="dasfoot"><a href="https://github.com/php/php-src/blob/PHP-5.6/ext/standard/string.c">php 5.6 - ext/standard/string.c</a></span>
---
#> PHP_FUNCTION(str_pad) {
#> &nbsp; char &ast;input;
#> &nbsp; int  input_len;
#> &nbsp; long &nbsp;pad_length;
#> &nbsp; char &ast;pad_str_val = " ";
#> &nbsp;  <c>/&ast; ... &ast;/</c>
#> &nbsp; num_pad_chars = 
#> &nbsp; &nbsp; &nbsp;<h>pad_length - input_len;</h>
#> &nbsp;  <c>/&ast; ... &ast;/</c>

<span class="dasfoot"><a href="https://github.com/php/php-src/blob/PHP-5.6/ext/standard/string.c">php 5.6 - ext/standard/string.c</a></span>
---
#> &nbsp;  <c>/&ast; cont. &ast;/</c>
#> &nbsp;
#> &nbsp;  <c>/&ast; ... &ast;/</c>
#> &nbsp; for (i = 0; i < left_pad; i++)
#> &nbsp; &nbsp; result[result_len++] 
#> &nbsp; &nbsp; &nbsp; = pad_str_val[i];
#> &nbsp;  <c>/&ast; ... &ast;/</c>
#> &nbsp; return result;
#> }

<span class="dasfoot"><a href="https://github.com/php/php-src/blob/PHP-5.6/ext/standard/string.c">php 5.6 - ext/standard/string.c</a></span>
---
#> &nbsp;  <c>/&ast; cont. &ast;/</c>
#> &nbsp;
#> &nbsp;  <c>/&ast; ... &ast;/</c>
#> &nbsp; <h>for (i = 0; i < left_pad; i++)</h>
#> &nbsp; &nbsp; result[result_len++] 
#> &nbsp; &nbsp; &nbsp; = pad_str_val[i];
#> &nbsp;  <c>/&ast; ... &ast;/</c>
#> &nbsp; return result;
#> }

<span class="dasfoot"><a href="https://github.com/php/php-src/blob/PHP-5.6/ext/standard/string.c">php 5.6 - ext/standard/string.c</a></span>
---

#= User-land<br>"standard library"
Note: jquery

left-pad
---
#= Design by<br>Committee
Note: same loveingly maintained word document from version one. 

15, 20 yaers, one word doc

over head
---
#= However

---
#= JavaScript<br>is improving
---

#= ECMAScript 5
Note: std intro'd in 2009

Mostly adpoted
---
#= `isArray`
---
#> ES5> Array.isArray({ a: "b" })
#>- false
#>- ES5> Array.isArray(["a","b"])
#>- true
---
#= `trim`

Note: JS didn't ahve a trim command til ES5
it had a `trimLeft` and a `trimRight`

---

#> ES3> " Hello ".trimLeft()
#>- "Hello "
#>- ES3> " Hello ".trimRight()
#>- " Hello"
#>- ES<h>5</h>> " Hello ".trim()
#>- "Hello"  
---

#= Improved<br>`parseInt`

---
#>  ES3> parseInt("08")
#>- 0
#>- ES<h>5</h>> parseInt("08")
#>- 8
#>- ESx> parseInt("08", 10) <h>// radix</h>
#>- 8
Note: assumed to be octal unless you have ECMAScript 5.
Supply radix to be cross compatible.
---
#= `map`
---

#> ES5> [1, 2, 3].map(Math.sqrt)
#>- [1, 4, 9]
#>- <c>// [Math.sqrt(1)<br>&nbsp; , Math.sqrt(2)<br>&nbsp; , Math.sqrt(3)]</c>
#>- ES5> a = ['10','10','10','10']
#>- ES5> a.map(parseInt)
#>- [10, NaN, 2, 3]
#>- <h>// Be aware of optional<br>// parameters</h>
---
#= ECMAScript 6
Note: approved in June 2015 (a few months ago)

Still very much not adpoted.
---
#= `let`
---

#> <c>// life.js</c>
#> function ans() {<br> &nbsp; var answer = 42; <br> &nbsp; return answer;<br>}
---
#> <c>// life.js</c>
#> function ans() {<br> &nbsp; <h>let</h> answer = 42; <br> &nbsp; return answer;<br>}

Note: proper block scope
Re-declarations are in error
---
#= `import`
---
<p></p>
#> <c><!&dash;&dash;&dash; old importing --></c>
#> &lt;html>
#> &lt;script src="<h>life.js</h>">&lt;/script>
#> &lt;script src="<h>stuff.js</h>">&lt;/script>
#> ...
#> &lt;/html>
---
#> <c>// life.js</c>
#> <h>export</h> function ans() {<br> &nbsp; let answer = 42; <br> &nbsp; return answer;<br>}
<br>
#>- <c>// stuff.js</c> <br><h>import</h> { ans } from './life';
---
#= ECMAScript 5/6 Adoption
---
##= kangax.github.io/compat-table/es5/
##= kangax.github.io/compat-table/es6/
---
#= Non-standard 'Standards'
---
#= `console.log`
Note: Not actually a standard :D
---
#> > console.log("a string")
#>- "a string"

#>- > a = 42
#>- > console.log("a is: " + a);
#>- "a is 42"
Note: basics
---
#> > console.time("Process")
#>- > <c>// ... do the thing</c>
#>- > console.timeEnd("Process")
#>- "Process: 1337ms"

#>- > console.log("%cHello world!",<br>&nbsp;"color: red; font-size: 40px");
#>- <span style="color: red; font-size: 70px">Hello world!</span>
Note: fancy extensions

try autocompleting for more, including grouping
---
<br><br>
@ facebook.png
Note: from console on facebook


OK I LIE
---

#= `console.log`
##= github.com/whatwg/console
Note: It's slowing getting standardaised :D

... by Web Hypertext Application Technology Working Group


their markup parser for standards doc createion is called...

bikeshed

---
#= Extending<br>JavaScript
---
#= Polyfill
Note: Adding new funcionality in JS to JS by adding more JS
---
##= `padStart` polyfill
---
<pre><code>if (!String.prototype.padStart) {
&nbsp; &nbsp; String.prototype.padStart = function padStart(maxLength, 
&nbsp; &nbsp; &nbsp; fillString = ' ') {
&nbsp; &nbsp; &nbsp; &nbsp; const O = RequireObjectCoercible(this);
&nbsp; &nbsp; &nbsp; &nbsp; const S = String(O);
&nbsp; &nbsp; &nbsp; &nbsp; const intMaxLength = ToLength(maxLength);
&nbsp; &nbsp; &nbsp; &nbsp; const stringLength = ToLength(S.length);
&nbsp; &nbsp; &nbsp; &nbsp; if (intMaxLength <= stringLength) { return S; }
&nbsp; &nbsp; &nbsp; &nbsp; let filler = typeof fillString === 'undefined' ?
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ' ' : String(fillString);
&nbsp; &nbsp; &nbsp; &nbsp; if (filler === '') { return S; }
&nbsp; &nbsp; &nbsp; &nbsp; const fillLen = intMaxLength - stringLength;
&nbsp; &nbsp; &nbsp; &nbsp; while (filler.length < fillLen) {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const fLen = filler.length;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const remainingCodeUnits = fillLen - fLen;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (fLen > remainingCodeUnits) {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; filler += filler.slice(0, remainingCodeUnits);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } else {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; filler += filler;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; const truncatedStringFiller = filler.slice(0, fillLen);
&nbsp; &nbsp; &nbsp; &nbsp; return truncatedStringFiller + S;
&nbsp; &nbsp; };
}
</pre></code>
---
##= `isArray` polyfill
Note: you can also polyfill things that exist in ES5 but might not be available
---
###= &nbsp; 
<pre style="font-size: 30px"><code>if (!Array.isArray) {
 &nbsp; Array.isArray = function(arg) {
&nbsp; &nbsp; return Object.prototype.toString.call(arg) 
&nbsp; &nbsp; &nbsp; &nbsp; <h>=== '[object Array]';</h>
 &nbsp;};
}
</pre></code>
Note: Can also polyfil things that may not exist in your browser. but specifically only define it if it's not already defined
---
##= `console.log` polyfill
---
###= &nbsp;
<pre style="font-size: 30px"><code>window.console =
&nbsp; &nbsp; typeof window.console === 'undefined' ? {
&nbsp; &nbsp; &nbsp; &nbsp; log: function(str) {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; alert(str)
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; } : window.console;</pre></code>

- <pre style="font-size: 30px"><code>
console.log("Viva la Alert-based Debugging");
&nbsp;</pre></code>
---
#= JavaScript isn't awful
---
#= JavaScript is awe-ful
Note:
Full of Awe

It's amazing that we can take something so broken and made so much

The devil you know
---

=> When that's the glue<br>of the modern day web, it's a minor miracle that society even functions<br> - <a href="https://twitter.com/NamTaf/status/590790154991702016">Adam Jones</a>
---
=> ... JavaScript is no more weird or broken than any other scripting language<br> - <a href="https://twitter.com/seldo/status/728686963868344320">Laurie Voss, npm</a>
---
##= Other languages have wats
---
#= <pre>/usr/bin/irb</pre>
Note: Let's talk about ruby
---
#>  irb> ruby bare words
#>- NameError: undefined local<br>variable or method `words'

#>- irb> def method_missing(@args)<br> &nbsp; &nbsp; &nbsp;  args.join(" ")<br> &nbsp; &nbsp; end
#>- irb> ruby bare words
#>- "ruby bare words"
<span class="dasfoot"><a href="https://www.destroyallsoftware.com/talks/wat">destroyallsoftware.com</a></span>
Note: Method Missing is evil monkey patching

This is how Rails works

find_customer_by_id substring
---
<pre><code><c># Customer.find&lowbar;all&lowbar;by&lowbar;last_name(last_name)</c>
def method&lowbar;missing(method&lowbar;id, &ast;arguments)
&nbsp; if match = /^<h>find&lowbar;</h>(<h>all&lowbar;by</h>|by)<h>&lowbar;</h>(<h>[&lowbar;a-zA-Z]\w*</h>)$/
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .match(method&lowbar;id.to&lowbar;s)
&nbsp; &nbsp; &nbsp; <c># ...</c>
&nbsp; &nbsp; &nbsp; self.class_eval %{
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  def self.#{method_id}(*args) 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <c># ...</c>
&nbsp; &nbsp; &nbsp; }, __FILE__, __LINE__
&nbsp;
&nbsp; &nbsp; &nbsp; send(method_id, *arguments)
&nbsp;
&nbsp; elsif match = /^find_or_(initialize|create)_by_([_a-zA-Z]\w*)$/
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .match(method&lowbar;id.to&lowbar;s)
&nbsp; &nbsp; &nbsp; <c># ...</c>
&nbsp; &nbsp; &nbsp; send(method_id, *arguments)
&nbsp; else
&nbsp; &nbsp; &nbsp;super
&nbsp; end
end
</code></pre>

<span class="dasfoot"><a href="http://apidock.com/rails/v2.0.0/ActiveRecord/Base/method_missing/class">Rails 2.0.0 ActiveRecord/Base/method_missing</a></span>
---
#= <pre>/usr/bin/irb</pre>
Note: Let's talk about ruby
---
#> irb> not true && false
#>- false

#>- irb> not true and false
#>- true

<span class="dasfoot"><a href="http://whatthefuckruby.tumblr.com/post/70164947137">whatthef&#45;&#45;&#45;ruby.tumblr.com</a></span>
Note: order of presidence

&& || 
not
and or
---

#= <pre>/usr/local/bin/ghci</pre>
Note: Let's talk about Haskell
---

#> λ&gt; length [1,2]
#>- 2

#>- λ> length (1,2)
#>- 1

Note: because foldable, fMap fun
---
#= <pre>/usr/local/bin/ghci</pre>
Note: Let's talk about Haskell
---
#> λ> let a = 2 + 2
#>- λ> a
#>- 4

#>- λ> let b = 2 + 2 where 2 + 2 = 5
#>- λ> b
#>- 5
Note: Because haskell
---
#= <pre>/usr/bin/local/pascal</pre>
Note: Let's talk about pascal
---

#> Program boop(output);
#> VAR x: INTEGER;
#> begin
#> &nbsp; x := 41;
#> &nbsp; x += 1;
#> &nbsp; writeln(x = 42);
#> end.
<br>
#>- TRUE



Note: that's all I wanted to point out

an assignment operator that doesn't look like equality; bliss
---

<p></p>
#> Program boop(output);
#> VAR x: INTEGER;
#> begin
#> &nbsp; x <c>:=</c> 41; <c> // assignment</c>
#> &nbsp; x += 1; 
#> &nbsp; writeln(x <c>=</c> 42); <c> // equality </c>
#> end.
<br>
#> TRUE

Note: Let's talk about something completely different
---
#= <pre>/bin/bash</pre>

Note: Let's talk about bash
---

#> $ 4 + 2
#>- bash: 4: command not found
#>- $ $(( 4 + 2 ))
#>- bash: 6: command not found
#>- $ echo $(( 4 + 2 ))
#>- 6

Note: let's do some simple arithmatic in bash

I'm just used to a repl that understands integers

shrug
---

#= <pre>/usr/local/bin/iex</pre>

Note: Let's talk about Elixir

---

#> iex> Enum.map(1..5,<br>&nbsp; &nbsp; &nbsp; &nbsp; fn(x) -> x*x end )
#>- [1, 4, 9, 16, 25]

#>- iex> Enum.map(6..10,<br>&nbsp; &nbsp; &nbsp; &nbsp; fn(x) -> x*x end )
#>- '$1@Qd'

<span class="dasfoot"><a href="http://www.cursingthedarkness.com/2015/10/the-definitive-all-dancing-all-complete.html">cursingthedarkness.com</a></span>
Note:

Elixir is erlang

Strings in erlang are list of integers

and somewhow, elixir is inferring the second is string, not a list of numbers
---

#= <pre>/usr/bin/cpp</pre>

Note: lets talk about c plus plus
---
#>  > printf("wat??!")
#>- wat|
<br>
#>- <h>// ??! -> |<br>// ??< -> {<br>// ??> -> }<br>// ??= -> #</h>
#>- <c>// "Trigraphs"<br>// ISO 646</c>


<span class="dasfoot"><a href="http://stackoverflow.com/questions/1234582/purpose-of-trigraph-sequences-in-c">Stack Overflow</a></span>

Note: disabled in gcc, works in c++11

Trigraphs - used as a work around for a lack of special symbols in ISO 646

ISO 646 nearly identical to ASCII
---
#= <pre>/usr/local/bin python</pre>
Note: Let's talk about Python
---
#> >>> a = 256
#>- >>> b = 256
#>- >>> a is b
#>- True

<span class="dasfoot"><a href="www.youtube.com/watch?v=sH4XF6pKKmk">Investigating Python Wats</a></span>
---
#>  >>> a = 257
#>- >>> b = 257
#>- >>> a is b
#>- False
#>- <br>>>> a = 257; b = 257
#>- >>> a is b
#>- True

<span class="dasfoot"><a href="www.youtube.com/watch?v=sH4XF6pKKmk">Investigating Python Wats</a></span>
---

#= <pre>#!/usr/bin/env java</pre>

Note: let's talk about java
---

#> java> Integer a = 1024;
#>- java> Integer b = 1024;
#>- java> a <= b
#>- true
#>- java> a >= b
#>- true
#>- java> a == b
#>- false

<span class="dasfoot"><a href="http://stackoverflow.com/a/2001861/124019">Stack Overflow</a></span>

Note: integer caching. different objects. 

Similar to python, but different.
---
#= <pre>/usr/local/bin/scala</pre>
Note: Let's talk about scala
---

#> scala>  println({} + "")
#>- ()
Note: unlike type concatenation issues, just like JavaScript

---
#= <pre>/usr/bin/xcrun swift</pre>
Note: Let's talk about Swift
---
<pre><code>let cat_cafe = [
 &nbsp;"cats": [
 &nbsp; &nbsp;"01": ["nyan": "mew"],
 &nbsp; &nbsp;"02": ["nyan": "mew"],
 &nbsp; &nbsp;"03": ["nyan": "mew"],
 &nbsp; &nbsp;"04": ["nyan": "mew"],
 &nbsp; &nbsp;"05": ["nyan": "mew"],
 &nbsp; &nbsp;"06": ["nyan": "mew"],
 &nbsp; &nbsp;"07": ["nyan": "mew"],
 &nbsp; &nbsp;"08": ["nyan": "mew"],
 &nbsp; &nbsp;"09": ["nyan": "mew"],
 &nbsp; &nbsp;"10": ["nyan": "mew"],
 &nbsp; &nbsp;"11": ["nyan": "mew"],
 &nbsp; &nbsp;"12": ["nyan": "mew"],
 &nbsp; &nbsp;"13": ["nyan": "mew"],
 &nbsp; &nbsp;"14": ["nyan": "mew"],
 &nbsp; &nbsp;"15": ["nyan": "mew"]
 &nbsp;]
]</code></pre>
- <pre style="margin-top: -20px;"><code>print("Cat count: " + String(cat_cafe["cats"]!.count))</code></pre>
- <pre><code>$ time -p xcrun swift cats.swift</code></pre>
- <pre style="margin-top: -20px;"><code>Cat count: 15</code></pre>
- <pre style="margin-top: -20px;"><code>real 828.78</code></pre>


<span class="dasfoot"><a href="https://bugs.swift.org/browse/SR-305">SR-305</a> <a href="https://spin.atomicobject.com/2016/04/26/swift-long-compile-time/">(atomicobject.com)</a></span>
Note: Swift

Wat isn't the strint dict int concat

Original version of this is 20 iterations, taking 20 - 55 *HOURS*

Dics of Dics of Dicts of strings compiler inefficency

Type inference issue

Fixed late April, in dev Snapshot May 9
just missed 2.2.1, may get into 2.2.2?
---
#= <pre>/usr/bin/env perl -de1</pre>
Note: Let's talk about Perl

---

#> > if ("foo" == "bar") {
#> > &nbsp; &nbsp; print "true"
#> > } else {
#> > &nbsp; &nbsp; print "false"
#> > }

#>- true
<span class="dasfoot"><a href="http://stackoverflow.com/a/14046720/124019">Stack Overflow</a></span>
Note: Reason is `==` is for number comparing

eq is for string comparing

a new programmer won't know this.
---


#= <pre>/usr/bin/php -a</pre>

Note: Let's talk about PHP
---
#> php> echo (TRUE ?<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  "True" : "False");
#>- True
#>- php> echo (FALSE ?<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  "True" : "False");
#>- False

<span class="dasfoot"><a href="http://phpsadness.com/sad/30">phpsadness.com</a></span>
Note: short hand for if else if else if
---

#> php> echo (FALSE ? "one"<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: FALSE ? "two" <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: &nbsp; &nbsp; &nbsp; &nbsp; "three");
#>- three

<span class="dasfoot"><a href="http://phpsadness.com/sad/30">phpsadness.com</a></span>
---

#> php> echo (FALSE ? "one"<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: TRUE &nbsp;? "two" <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: &nbsp; &nbsp; &nbsp; &nbsp; "three");
#>- two

<span class="dasfoot"><a href="http://phpsadness.com/sad/30">phpsadness.com</a></span>
---
#> php> echo (TRUE &nbsp;? "one"<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: TRUE &nbsp;? "two" <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: &nbsp; &nbsp; &nbsp; &nbsp; "three");
#>- two


<span class="dasfoot"><a href="http://phpsadness.com/sad/30">phpsadness.com</a></span>
Note: WRONG
---

#= <pre>C:&bsol;> powershell</pre>

Note: Let's talk about powershell

---

#> PS> if (2 > 1) { "true" }<br>&nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; else { "false" }
#>-  true

#>- PS> if (2 < 1) { "true" }<br>&nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; else { "false" }
#>- The '<' operator is reserved<br>for future use.

<span class="dasfoot"><a href="http://fuckpowershell.tumblr.com/">f&#45;&#45;&#45;powershell.tumblr.com</a></span>
---
#= My point is...
---
#= All languages<br>have quirks
Note: 
Yes some have more than others. Some have reasons why they can't be fixed

But that doesn't mean we have to critise those that use them

"We are not our tools. Discrimination based on tools is just as bad as discrimination based on race or gender" - Rachel Nabours

Hopefully I've shown just how good JS can be. And it might make someone reconsider before I see the next awful tirade on twitter
---

#= &nbsp;

@ footer.svg
---
# Resources
### &nbsp;
#### Check footnotes throughout the slide deck

### &nbsp;
### Online Interative Development Environments:
#### <a href="https://repl.it/">repl.it</a>
#### <a href="http://www.tutorialspoint.com/codingground.htm">TutorialsPoint.com</a>
