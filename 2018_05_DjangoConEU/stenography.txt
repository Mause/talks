Before I start a word of warning

This talk is being presented next month at DjangoCon Europe

this talk is a work in progress.

If you find any technical errors, or issues, please tell me **after** the talk. I"ll have my twitter and email at the end

Now, with that out of the way

*cough*. :center self:
Hi I'm Katie
And I do a bunch of things in the Django community
I spoke at DjangoCon Europe 16 in Budapest
I was a mentor, and also gave a talk, at DjangoCon US 2017
I was the organiser of djangocon australia 17
I'm currently serving as a Director of the Django Software Foundation
But I'm an absolute novice at django. I have no idea what I'm doing
I still see the django admin as

a magical piece of software development
I mean, the fact that this admin is just generated based on something called models..?

and it just works, it's so cool


But just because I'm a novice at django, doesn't mean I'm a novice at tech
I have over a decade of software development and systems administration behind me.

Before getting into the Python/Django space, I was a ruby dev, working with Rails and Sinatra stacks

But before that, around the time the magic was being removed from Django, I was in my first tech job, and using my first tech stack:

Was Orale Application Express

Oracle Appplication express, also known as Apex, is a in-database web application creation suite. it comes free with Oracle XE (the free version of the database)
Back in 2006, this was the bees knees. An entire web GUI way to build a website based on form submissions and database manpulations. I used this for years
So much so, I was a technical reviewer for a technical book on the subject.

Yes, I'm that much of a nerd.
I haven't used APEX for years. But, there's one thing that I have an intrinstic knowledge of

SQL

It's like riding a bike. Left outer joins are always going to be a bit.. fuzzy, but I can't count the amount of times I wished there was an option of throwing a LIKE clause on search results.


Getting back to Django.

I'm still getting my head around how Django works

I mean, sure, for a sufficiently setup existing django application, the admin makes things so intuitive.

But if you were to try and tell me how things work underneath

I would have some sort of fog of war thing going on. I can't tell what's going on.
Even worse when I'm told "Oh, just use the shell"

It's an empty space. But I've been told that this is where the actual Django magic lives
The ORM

The Object relational mapper

The engine that makes django go

But without context, what does that even mean?
Context is important.

So for the purposes of this, let's break away from the normal.

A number of tutorials start with a clean slate, and assume you have little to know dev experience. DjangoGirls is great for complete beginners to development

But it's not so helpful for developers who come into the space with prior knowledge

It's also not helpful for the way that I came into Django; trying to fix an existing project

So for the purposes of this, we're going to use an existing project


We're going to be a noisy myna, and go bughunting.

We're going to find outselves an existing project, in this case, a field of kale, and hunt about trying to find some delicious bugs. We may not find any, but we can poke around and see what we find.
so, our context today isn't going to be the standard blog site or news portal.

It's going to be about something near and dear to my heart
emoji


If you've seen my {DjangoCon EU 2016 talk,emoji talks before}

this website would be sort of familiar to you.

I call it.. Unicodex. It's a django-backed database of different emoji from different platforms

On the home page there's a bunch of emoji and if you click on one

it shows you the emoji from different vendors and the versions.

So given this website exists, we can start poking around in the shell
what they mean here is the django shell
which is available using the manage.py shell command


Here, we're presented with an interactive console

All shell is is a python environment where the django environment path has been loaded.

From here you can interact with your django projet directly.

but how do I use the shell

First things first. For an SQL dev, the first thing they normally do in a foreign system is
depending on which flavour of database is most familiar to you, you'd try and issue one of these commands

For mysql, for postgres, for oracle

But we're not in a database console, we're in the django shell. We need to use ORM codes.


SO! To list all the tables in a project in the django shell!...

there's no real good way.

In order to start querying model objects, you need to import the models

In django, a project has multiple applications, or apps, and an app can have one or many models.

The model code is the powerhouse of django. the ORM manipulates models. A lot of the logic for a django project is going to be in the model.py of it's various applications.
But without looking at the model code, and understanding what you're looking at in order to generate the import statement, you can be at a complete loss.

Thankfully, django is clever and has helpful methods you can call to generate a list of imports for all the models in the project
here's some I prepared earlier

We're going to import the django apps

And iterate over all the apps that django knows about

For each of those, we're going to get all the models

and print an import statement for each

Going back to our shell
for now, we're just going to dump in that code and run it
and what we get back is some generated import statements about

This output will have similarities across django projects

the first few in this list are pretty standard fair; authentication, sessions, sites, admin

But what we're looking for is, in a lovely happenstance, the models that match the name of the website we saw earlier -- unicodex.
We can find all this information directly via the database,

and django provides an easy way to get there
back in our terminal, instead of running manage.py shell, we run DB shell
and we get an output that will be familiar to postgres devs in the audience

This particular project has a postgres backend
given we know it's postgres, we cna issue the postgres list table command, and get back
all our tables. Note the usual suspects from earlier, auth, content, sites
but also, our own project's tables

We'll take note of these for later.
so now that we know there are tables, we'd like to see what's inside them
in SQL, this would be your standard select star from table
in the oRM, this maps to Codepoint, the model, dot objects dot all

Just list all of them
back over in our console, before we can call Codepoint, we need to use that import statement we generated earlier
from unicodex dot models import codepoint
after we hit enter, we'll get no output, which is good, because this was successfully imported.
then we make our codepoint dot objects dot all call
and we get back a queryset of objects

We remember from earlier that there were sparkles, unicorns and hearts on our page, so we're getting the right data!

The return value here is known as a queryset, an unordered objects. QuerySets can be enacted upon further, which we'll see later.


**Query set is not a list**

now that we can see all the things, how about just some of the things
the SQL would be familiar

Adding a where clause for, say, sparkles
this maps to the ORM as filter. where the name column is a keyword argument of filter.


so in our fresh terminal, we import Codepoint

Then run our filter
and we get back a queryset with a single object: sparkles
we can also just return one specific record, instead of a queryset
so where last time we used filter

This time we use get
and we get a single object
a thing to note about get

Get will always return one and only one object

THERE CAN BE ONLY ONE

So if you try and run get, say, without any limiatations
we get a MultipleObjectsReturned error

which tells us that it would have returned three Codepoint objects, which is just far too much for get to handle.
So now we come to the fun bit. Joins

Anyone who's worked with SQL for long enough will know the venn diagrams for inner joins, outer joins, left joins, right joins, and it can get a bit confusing

Thankfully, especially for someone like me who has forgotten so much SQL, the ORM makes joins a joy.
say we want to join our design and codepoint tables

A codepoint has multiple designs. Sparkles has an image that shows up in Android, Apple, Facebook, etc

So we want to join on the codepoint_id on the designs table to the primary codepoint id

This is a good chunk of SQL

So what does the ORM equivelent look like?
Design dot objects dot filter codepoint dunder name equals sparkles.

I know right? so simple!
this doubleunderscore here is doing a lot of powerful things behind the scenes

which I'll explain more in a moment.

back to our terminal again, to execute this elegant little code snippet

We import the design model this time
and we run our filter
And we get back a reeeeeeally long queryset.

But, the resuts are truncated for us

This is so incredibly useful

Data is still there, if you iterate over the list, but the print representation specificalyl doesn't flood your terminal

(this was implemented because of a very real bug at Lawrance Journal World, where they had servers keep crashing, because the debug page was trying to be helpful and show all the data... a million objects worth..)
what we have here is one or more fields and then a lookup, all separated by double underscores

A lookup as an operation on that field

If you remember back when we looked up the fields on a model, we know what options we have here.
we have four fields - a unique id, two foreign keys off to other models, and image

but name isn't there. That came from codepoint

so if we inspect Codepoint

WE see that codepoint has the name field
You'll also note in our example that we end on a field.

By default the look up is an exact match on the string. So effectively, name equals sparkles
so by default what we're calling is codepoint name equals
as aside, did you know that this is how those awesome admin filters work? it's true!
if we go back to that admin page we saw right at the start


Look at the URL

It's our filters

the admin uses field lookups in it's UI

and to some extent, you can handcode this URL to do some basic filtering, even if there isn't any filters on the right hand side panel



back to our terminal

We can also forge a path down a different series of foreign keys

See the vendorversion there? Let's see what that contains
let's refresh our terminal and inspect VendorVersion

Okay, so a vendorversion has many designs, an ID, a name, and a Vendor FK

What about Vendor?
clear our terminal, import Vendor, and check

so vendor has a relationship with vendorversion, an id and a name too

And thus, we have exhausted our search, and we could build up a UML diagram showing the relationships between all the tables in this app

But I woldn't do that too you.

Back to what we were doing, showing filter walks

clearing our terminal again with Control L
we have a number of options here. Let's build the longest chain we can...

Let's filter design objects where... the linked vendor version

and the vendor linked to that....

the name of that vendor

contains...
the string Micro
And thus, we get a of all designs where the name of the linked vendor contains Micro

There are other field lookups we can use for a number of differnt things.

We're also not just limited to one filter, we can have more than one
instead of just filtering on Micro, we could alos
we get list of designs both from a vendor


So far we've dealt with single or chained filters, which will AND together

name equals sparkles AND image ends with png AND AND AND

If we want to start using OR, we need to get a bit fancy
This is where Q comes in

No, not the race from the great Star Trek sequel, The Next Generation,

Q and in Query

With Q, we can build up AND, OR, and NOT statements in our where clause when filtering objects

So, let's start some comparisons...
instead of using our super long chaining filter, let's use a simpler example here
this query would give us codepoints named sparkles with the description shiny

this would be the equvilent SQL
And we learnt earlier that unless there's a field lookup defined, we assume exact

This is the same SQL

We can also express this same statement using Q
so going back to our first example,
we could also have two separate filter clauses.
we could also

wrap our two filter parameters in Q

This provides the same result

Notice in all of this, the equivelent SQL hasn't changed.

With our comma here, we're implying we're using AND here. We can be explicit



But, since we have Q objects, we can do operations on them

Here, we're saying filter by this Query, and this Query

And we're using AND here explitictly

We don't have to wrap both in Q, either
going back to our changed example
we can change our queries with comman, and just wrap the first one and leave thther. Same result
and we don't have to wrap either. But what if we wrap just the second
So, we could just wrap the second one, and leave the first one alone, right?


well no, we get an error.

The error here is insightful: Syntax Error, positioal argument follows keyword argument

The reasoning behind this is that in all the code we've been doing here, we've been giving arguments to the filter function

And in python, you have to declare positional argumnet before keyword argumnets

Remembering that even in these new Django concepts, we're still using Python, so python rules still apply.
Another example of this. Let's put our code back working, and try changing that description

Say we want to search for sparkles and unicorns

So we search for name equals sparkles and name equals unicorns and
oh. There's an error.

This is agan, because Python. You can't repeat keyword aguments. But, you can get around this.
Just wrap it in Q

now, this code is valid python, but it isn't useful, because it will never return any results.

We're asking for exact string matches on the same column, twice. It'll always be an empty set.

But what we can do is change this from an and, to an OR

Using the comma is equiv to this AND, but with the comma we're giving filter two arguments. Here, we're giving it one. We'll get back to this, because it's really cool

So, to take our AND to and OR, we change the ampersand

to a pipe.

This is an or operation

You may have only seen these operators before in bitmasking

if we have X as a binary string of one zero one zero

and we have y as one one one zero zero zero zero

we can do something called bit masking

if we ask for x AND y

we get 10100000

For each bit, we only return 1 if both are 1

conversely, if we ask for x OR y

we get all ones at the start, then our stripes

That's because we return one is either or are 1


That's how binary ANDs and binary ORs work

This is very similar to what we do in SQL.

For each row of a table, we want to return it in our result set if BOTH conditions are true on and, or if either are true on and OR

so, using the and or operators here makes sense, because those are the actions we are performing

But, we're doing these operations on Query objects, not binary. Do how does that work?

What's happening here is metaprogramming. Sometimes confused for magic, it's a funcitonlaity of python that makes it really powerful.

I'm going to show you a small snippet of django source code. It won't be scary, don't worry.

django literally overloads the operations that happens when you try and do bitwise operations on the Q class in order for Q to have a logical response to bitwise operations

and it means you can do bitwise operations on Q obecjts and it's compeltely valid python

it's composble, it's functional, and it's intuative.

and it's been in Django for over 10 years

as well as AND or OR, we can also do NOT

So with our code above

we can and a tilda negation to invert that part of the query, and add a NOT to our SQL

Using our field lookups and these operations, we can do a lot of things. But are some limitations

Firstly, you need to understand how the joins happen in order avoid confusion

Consider the following we want codepoints where their design iages have png and start with design

THis is based on the filename I'm using for the iages uploaded to my models

Okay. Let's run that and see what happens

so in our terminal

remembering to import our model

we add our code

our results are truncated here, so let's get the count of this

rewind a step

add a count function on the end

37 results

But what code was run?

We have the ability to check this
we can import the django database connection modele
and inspect the last query run against our databse


wait, what??

let's check



well, we can tell it's a different SQL statement than before based on the length of the output.. but let's format itnicely and see what's going on
Ah.

We have TWO joins happening here

Every time there is a separate filter, it's another join. Which can absolutely be useful, but not when you're matching on the same associated table in both filters, as you can't join those references together.

To do that, put them both in the same filter call. Django will be able to work it out, then.
but what if you have something reeeeeally complex, that you can't easily represent in the ORM?

If you really really really need to, you can drop down to raw SQL CODE
but

but but but

You need to be careful

If you look up the docs about how to do this

you'll see it is FULL of warnings and notes and conditions

There are specific sections in the docs about how to give raw parameterised arguments to help prevent potential SQL injection, but you should still understand how this functionality works before you try using it.

You also break the ability for your app to be used by multiple databases. Because of the differences in SQL between databases, your postgres flavoured code probably will break if someone wants to run it on an sqlite database

But sometimes, SQL is better

the whole point of the ORM is in the name: the Object Relational Mapper. It's all about mapping objects to relations

the ORM can do 80% of things, but if there's stuff that's easier to do in RAW self, instead of wrangling the ORM, do that instead.

I've only touched the surface of the power of the ORM

If I've caught your interest in the power of this part of django, you can learn more yourself
How to create objects, including from raw SQL

Field types - things like email fields and image fields

And more field relations, ways that you can call both codepoint attributes on a design object, and design attributes on a codepoint
seriously, the docs are wonderful. Now that you know some of the general terms of this bit of software, you should be able to find more interesting ways to make the ORM work for you
Oh, and just one more note before I go
If you really want to make the ORM work well for you when developing
add ipython as a dev requirement in your Pipfile, or requirements.txt or whereever all good python package managers store their requirements.
it will turn your shell from this old and busted
to the new hotness

This is an ipython powered shell, which means
you start typing something, press tab, and
you get autocompleted suggestions.

So cool


So that's all I had. Hopefully with these tips and tricks about how to use the ORM to interact your project, you can start finding those pesky bugs you've been tasked to find.

It might be a new stack to you, it might be old school, but I find the utmost dorkish joy in finding that odd little thing in a technology stack that just a short time ago I had no idea about, and then being able to harness that power.

And being able to use your skills gained from other technology sets in new fields is really fun, sometimes a bit interesting, but always great.

thank you for your time
