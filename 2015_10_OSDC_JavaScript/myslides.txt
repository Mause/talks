#> <c>// If you can read this, yay!
#> <s>123456789 123456789 123456789 12</s>
#> > console.log("Hello World");
#> Hello World
#> <h>!#/usr/bin/env ruby</h>
#> > (0..3).each {|c| puts c}
#> 0
#> 1
#> 2
#> 3
#> => 0..3  <c>// Console is 11x32 </c>
---

<br>
<br>
# JavaScript is Awe-ful
<br>
@ footer.svg
---

@^ javascript_book.png

Note: Tapestry and Cooking and Yelling

---

#= Global Variables
---
<p></p>
#> > ans
---
#>  > ans = "";
#>- > function question() {<br>> &nbsp; var ans = 42;<br>> &nbsp; return ans;<br>> }
#>- > console.log(ans);
#>- ""
#>- > console.log(question());
#>- 42
#>- > console.log(ans);
#>- ""
---
<p></p>
#> > ans = ""; <c>//global</c>
#> > function question() {<br>> &nbsp; var ans = 42; <c>//local</c><br>> &nbsp; return ans;<br>> }
#> > console.log(ans);
#> ""
#> > console.log(question());
#> 42
#> > console.log(ans);
#> ""
---
<p></p>
#> > ans = ""; <c>//global</c>
#> > function question() {<br>> &nbsp; <s>var</s> ans = 42; <c>//global</c><br>> &nbsp; return ans;<br>> }
#> > console.log(ans);
#> ""
#> > console.log(question());
#> 42
#> > console.log(ans);
#> 42
---
#> <c>//ruby</c>
#> <h>@</h>ans = 42;
#>
#> <c>//python</c>
#> <h>global</h> ans = 42;
#> 
#> <c>//java
#> <h>public</h> static ans = 42;
Note: Because every other language has locals by default
---
#= Duck Typing
###- Quack

Note: if it looks like a duck and sounds like a duck, it's a duck.
---
#>  > 4 + 2 
#>- 6
#>- > 4 - 2
#>- 2
#>- > "4" - 2 
#>- 2 
#>- > "4" + 2
#>- "42"
---
<p></p>
#>  > 4 + 2 
#> 6
#> > 4 - 2
#> 2
#> > "4" - 2 
#> 2 <c>&nbsp;&nbsp; // type -> integer</c>
#> > "4" + 2
#> "42"<c> // type -> string</c>

Note: Automatic Type Co-ersion

Higher order type wins 
---
#= Arrays and Objects
---
#> > [] + []
#>- ""
#>- > [] + {}
#>- [object Object]
#>- > {} + []
#>- 0
#>- > {} + {}
#>- NaN

Note: Associativity? Pfft!
---
<p></p>
#> > [] + []
#> ""
#> > [] + {}
#> [object Object]
#> > {} + []
#> 0
#> > {} + {}
#> NaN <c>// wat</c>
---
#= Arrays != Objects
---
#>  > var arr = ['a', 'b', 'c']
#>- > arr
#>- ["a", "b", "c"]
#>- > arr.hello = "world"
#>- "world"
---
#> > arr
#>- ["a", "b", "c"]
#>- > for (var k in arr) {<br>>&nbsp;&nbsp; console.log(k);<br>> }
#>- 0<br>1<br>2<br>hello
---
#>  > arr.push("append");
#>- 4
#>- > c = 0;
#>- > for (var k in arr) {<br>>&nbsp; &nbsp; c = c + 1; <br>> }
#>- > c
#>- 5
#>- > arr.length
#>- 4
---
#= Equality
---
#>  > 0 ==&nbsp; false  
#>- true
#>- > 0 === false  
#>- false
#>- > 1 == &nbsp;"1"
#>- true 
#>- > 1 === "1"
#>- false
---
<p></p>
#> > 0 ==&nbsp; false  
#> true
#> > 0 === false  
#> false
#> > 1 == &nbsp;"1" <c> // equality</c> 
#> true 
#> > 1 === "1" <c>// equality without</c>
#> false &nbsp; &nbsp; &nbsp; <c>// type co-ersion</c>
---

<br><br>
> The fact that === exists in languages like PHP and JavaScript is a sign that those languages are ridiculously broken.
>
>  -- @TheColonial

---
#= But, why?
Note: why is javascript so awful
---

##= ~~ wavey time passing lines ~~
---

#= 1993
---
<br><br>
<pre><code>
&nbsp;  Hypertext Markup Language (HTML)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Tim Berners-Lee, CERN
&nbsp;  Internet Draft&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Daniel Connolly, Atrium
&nbsp;  IIIR Working Group&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; June 1993
   
   
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  Hypertext Markup Language (HTML)
                   
&nbsp; &nbsp; &nbsp; A Representation of Textual Information and MetaInformation
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for Retrieval and Interchange
</pre></code>

<span class="dasfoot"><a href="http://www.w3.org/MarkUp/draft-ietf-iiir-html-01.txt">http://www.w3.org/MarkUp/draft-ietf-iiir-html-01.txt</a></span>
---
## The Original HTML
<br>
#> &lt;HTML>
#> &lt;TITLE>My Page&lt;/TITLE>
#> &lt;BODY>
#> &nbsp; &nbsp; &lt;P>Hello World Wide Web&lt;/P>
#> &lt;/BODY>
#> &lt;/HTML>

Note: YELLING TAGS
---
##= Anchor Tags
<br>
#>- &lt;<h>A</h> HREF="index.html">My Page&lt;/<h>A</h>>
---
##= Glossary or Definition List
<pre><code>
&nbsp; &lt;H1>Dictionary&lt;/H1>
&nbsp; <h>&lt;DT></h>pun<h>&lt;/DT></h>
&nbsp; <h>&lt;DD></h>a joke exploiting the different possible meanings of 
&nbsp; a word or the fact that there are words that sound alike 
&nbsp; but have different meanings. <h>&lt;/DD></h><br>
</code></pre>
- <img src="pictures/dt.png" width="60%">
---
<br>
#= <img src="pictures/static.jpg">
---
#= ~~ wavey lines ~~
---
#= 1995
Note: The year is 1995. The documentary Hackers has been released, and people are burning through the data with their 28.8K BAUD modems

---

#= <img src="pictures/netscape-navigator.jpg" width="40%">

---
#> > (define hello-world
#> >&nbsp; (lambda ()
#> >&nbsp; &nbsp; (begin
#> >&nbsp; &nbsp; &nbsp; (write ‘Hello-World)
#> >&nbsp; &nbsp; ) 
#> >&nbsp; )
#> > )
#> > 
#> > (hello-world)
#> Hello-World
#> 
</pre></code>

---
#= <img src="pictures/javascript_1995.png" width="40%">

Note: Brendan Eich wanted to do fancy things

Made JavaScript in 10 days

Only took 6 to create the world

Waterfall software development cycle estimages

---
<p></p>
#> // alert based debugging
#> alert(my_date);

#= <img src="pictures/alert-debugging.gif" width="40%">

---

#= ~~ fast forward ~~
---

#= 2000

---

=@ image.png

Note: big names in dotcomboom etc

---

=@ bubbleburst.png

Note: pop

---
#= ~~ fast forward ~~
---
#= 2005
---

@ needanimage.png

Note: Things getting back together again

---

#= 2006
---

=@ firebug.png

Note: FIREBUG OMG
---

=@ mootools.png
---

=@ jquery.png
---

=@ rise of the framworks.png

Note: Why write javascript when you can use nice things that other people have written?
---

#= 2009
---

=@ node.js

---

##= But I don't want to write<br>JavaScript<br>;_;

---

@ coffeescirpt.png
## Not-shite JS -> JavaScript
---

@ typescript.png
## Functional* -> JavaScript

---

@ batavia.png
## Python -> JavaScript

---

##= But I don't want to write<br>anything *other* than<br>JavaScript
---

=@ crosscompiler.png
Note: crosscompilers



---

## Debugging
#
#> console.log()


---

#> window.console = typeof window.console === 'undefined' 
#> &nbsp; &nbsp; ? {log:function(str){ alert(str) }} 
#> &nbsp; &nbsp; : window.console;
#> <br>console.log("oh good god.");


Note: console.log isn't defined in any ECMA standard, therefore it doesn't have to exist. 

---

facebook console css


---
#= JavaScript isn't awful
---
#= JavaScript is awe-ful
Note: It's amazing that we can take something so broken and made so much

The devil you know
---

#= R.I.P<br>Java Applets
### &nbsp;
---
#= R.I.P<br>Flash
### (mostly)
---
#= JavaScript is awesome.
---
<br><br>
> ... when that's the glue of the modern day web it's minor miracle that society even functions
>
>  -- @NamTaf
---
#= But just remember...
##- other languages have wats
---

#= <pre>#!/usr/bin/env java</pre>

Note: Let's about about Java

---
#> <c>/&#42;&#42; read from a file &#42;&#42;/</c>
#>- filename = "myfile.txt"
#>- f = new FileInputStream(filename);
#>- i = new InputStreamReader(fis);
#>- r = new BufferedReader(isr);
#>- String line = rdr.readLine();
#>- while(line != null){<br>&nbsp;&nbsp;<c>/&#42; actual processing &#42;/</c><br>&nbsp;&nbsp;line = rdr.readLine();<br>}

---
#= <pre>#!/usr/bin/env ruby</pre>
Note: Let's talk about ruby
---
#> BAR = "outer"
#> module A
#> &nbsp;  FOO = nil; BAR = "inner"
#> &nbsp;  module B
#> &nbsp; &nbsp;  puts A::FOO::BAR
#> &nbsp;  end
#> end
#> puts A::FOO::BAR
#>- <br>???

Note: https://twitter.com/charliesome/status/654190206547968000
---
<p></p>
#> BAR = "outer"
#> module A
#> &nbsp;  FOO = nil; BAR = "inner"
#> &nbsp;  module B
#> &nbsp; &nbsp;  puts A::FOO::BAR
#> &nbsp;  end
#> end
#> puts A::FOO::BAR
#> <br>inner
#> outer
---
#> TODO Barewords
Note: Method Missing
---

#= <pre>ghci</pre>
Note: Let's talk about Haskell
---

#>  λ&gt; length []
#>- 0
#>- λ&gt; length [1]
#>- 1
#>- λ&gt; length [1,2]
#>- 2
#>- λ> :type [1,2]
#>- [1,2] :: Num t => [t]

Note: Type of List
---

#> λ> :type (1,2)
#>- (1,2) :: (Num t, Num t1)=>(t, t1)
#>- λ> length (1,2)
#>- 1

Note: because foldable, fMap fun
---

#> λ> length (Left 0)
#>- 0
#>- λ> length (Right 0)
#>- 1

---
#> λ> let a = 2 + 2
#>- λ> a
#>- 4
#>- λ> let b = 2 + 2 where 2 + 2 = 5
#>- λ> wat
#>- 5

---
#= <pre>#!/usr/bin/env python</pre>
Note: Let's talk about Python
---
#> >>> ans = 42
#>- >>> def question(): <br>... &nbsp; &nbsp; return ans
#>- >>> question() 
#>- 42

Note: undefined answer within scope of the function

but it still works

---
#> >>> ans = 42
#>- >>> def question(): 
#>- ... &nbsp; &nbsp; ans += 1
#>- ... &nbsp; &nbsp; return ans
#>- >>> question() 
#>- Traceback (most recent call last):<br> &nbsp;File "<stdin>", line 1, in <module><br> &nbsp;File "<stdin>", line 2, in question<br>  UnboundLocalError: local variable 'ans' referenced before assignment

Note: manipulation of variable within the scope
---
#> >>> a = 256
#>- >>> b = 256
#>- >>> a **is** b
#>- ???
---
<p></p>
#> >>> a = 256
#> >>> b = 256
#> >>> a **is** b
#> True

---
#>  >>> a = 257
#>- >>> b = 257
#>- >>> a **is** b
#>- ???
---
<p></p>
#> >>> a = 257
#> >>> b = 257
#> >>> a **is** b
#> False
#>- <br>>>> a = 257; b = 257
#>- >>> a **is** b
#>- ???
---
<p></p>
#> >>> a = 257
#> >>> b = 257
#> >>> a **is** b
#> False
#> <br>>>> a = 257; b = 257
#> >>> a **is** b
#> True

---
#= wat
---
<br><br>
<br><br>
<br><br>
<h4>Sources of some wats</h4>
<h4> Wat - Gary Bernhardt, CodeMash 2012</h4>
https://github.com/puffnfresh/wat-collection
<h4> Investigating Python Wats - Amy Hanlon, Python 2015 </h4>
