#> <c>// If you can read this, yay!
#> <s>123456789 123456789 123456789 12</s>
#> > console.log("Hello World");
#> Hello World
#> <h>!#/usr/bin/env ruby</h>
#> > (0..3).each {|c| puts c}
#> 0
#> 1
#> 2
#> 3
#> => 0..3  <c>// Console is 11x32 </c>
---

<br>
<br>
# JavaScript is Awe-ful
<br>
@ footer.svg
---

@^ javascript_book.png

Note: Tapestry and Cooking and Yelling

---

#= Global Variables
---
<p></p>
#> > ans
---
#>  > ans = "";
#>- > function question() {<br>> &nbsp; var ans = 42;<br>> &nbsp; return ans;<br>> }
#>- > console.log(ans);
#>- ""
#>- > console.log(question());
#>- 42
#>- > console.log(ans);
#>- ""
---
<p></p>
#> > ans = "";
#> > function question() {<br>> &nbsp; <s>var</s> ans = 42; <br>> &nbsp; return ans;<br>> }
#> > console.log(ans);
#> ""
#> > console.log(question());
#> 42
#> > console.log(ans);
#> 42
---
#= Duck Typing
Note: if it looks like a duck and sounds like a duck, it's a duck.
---
#>  > 4 + 2 
#>- 6
#>- > 4 - 2
#>- 2
#>- > "4" - 2 
#>- 2 
#>- > "4" + 2
#>- "42"
---
#= Arrays and Objects
---
#> > [] + []
#>- ""
#>- > [] + {}
#>- [object Object]
#>- > {} + []
#>- 0
#>- > {} + {}
#>- NaN

Note: Associativity? Pfft! Transativity? Hahahah
---

#= Arrays != Objects
---
#>  > var arr = ['a', 'b', 'c']
#>- > arr
#>- ["a", "b", "c"]
#>- > arr.hello = "world"
#>- "world"
#>- > arr
#>- ["a", "b", "c"]
---
#> > for (var k in arr) {<br>>&nbsp;&nbsp; console.log(k);<br>> }
#>- 0<br>1<br>2<br>hello
---
#>  > arr.push("append");
#>- 4
#>- > c = 0;<br>> for (var k in arr) {<br>>&nbsp; &nbsp; c = c + 1; <br>> }<br>> c
#>- 5
#>- > arr.length
#>- 4
---
#= Equality
---
#>  > 0 ==&nbsp; false  
#>- true
#>- > 1 == &nbsp;"1"
#>- true 
#>- > 0 === false  
#>- false
#>- > 1 === "1"
#>- false
---
#= Developers can get<br>just a little bit<br>upset at JavaScript
---
=> "[A]: Please don't hire me for my JS abilities. I'm proficient enough to<br>loath the language intensely"
Note: experienced developers get frustrated with it
---

=> "[B]: I have been around [A]<br>when they hack JS.<br>Let's just say Satan himself would blush."
Note: people near to javascript developers hear them swear.  A lot.
---

=> "[C]: Have to modify some JavaScript<br>I did over a year ago. 
> 
> 'What is this?'<br>
> 'Why did I ...?'<br>
> 'What sort of name is that!'"

Note: confusing syntax, hard to come back to 

---

=> "[D]: 'I hate writing JavaScript.<br>
> I know, I'll write some JavaScript to fix it.'
>
> This is how Angular happens."

Note: Pot shots at the Language
---
#= ...
---
#= Why?
Note: why is javascript so awful
---

#= JavaScript History<br>in 30 words or less
###- For more, see "Crockford on JavaScript"
Note: I don't have time to tell the entire history of javascript

Check out the YUI Theatre series 

---

###= JavaScript was developed in 10 days
### by Brendan Eich for Netscape
### to offer a lightweight version of Java
### in order to compete for users with Microsoft

Note: Let's step through that
---


###= JavaScript was developed in 10 days
### &nbsp;
### &nbsp;
### &nbsp;
Note: awfully short development time

just by that alone could explain things.
---
###= JavaScript was developed in 10 days
### by Brendan Eich for Netscape
### &nbsp;
### &nbsp;
Note: 
Eich originally wanted to make scheme

Sure, they said

Oh wait, that's scheme, that's gross, don't do that.
---
#> > (define hello-world
#> >&nbsp; (lambda ()
#> >&nbsp; &nbsp; (begin
#> >&nbsp; &nbsp; &nbsp; (write ‘Hello-World)
#> >&nbsp; &nbsp; ) 
#> >&nbsp; )
#> > )
#> > 
#> > (hello-world)
#> Hello-World
#> 
Note: We could have written in the browser like this
---
###= JavaScript was developed in 10 days
### by Brendan Eich for Netscape
### &nbsp;
### &nbsp;

Note: For user adoption, maybe it wasn't the best
---

###= JavaScript was developed in 10 days
### by Brendan Eich for Netscape
### to offer a lightweight version of Java
### &nbsp;


Note: so Eich made it look like Java, basing it a bit on Scheme and Self as well

Originally called LiveScript. Changed to JavaScript because it was kinda based on int

But Sun owned the trademark, so Sun owned the JavaScript trademark

Which is now owned by Oracle


Java could have been the language of the web

Java Applets

---

###= JavaScript was developed in 10 days
### by Brendan Eich for Netscape
### to offer a lightweight version of Java
### in order to compete for users with Microsoft

Note: Mosaic split into NetScape in SpyGlass

Netscape says: "we're going to wipe out MS!"

MS says: "whoops, buying spyglass"

race was on to develop the scriting language to make the web better

Because trademark, MS reverse engineered JS, called it JScript

---

##= JavaScript™

<span class="dasfoot"><a href="http://tsdr.uspto.gov/#caseNumber=75026640&caseType=SERIAL_NO&searchType=statusSearch">US Trademark &#35;75026640</a></span>
Note: 

---

##= ECMAScript

Note: Because of some fun issues, Tim Berners Lee and W3C wouldn't do the standard
 
TBL was apparently upset that Netscape took his simple design and made it silly

with things like images and formatting



They ended up at the

European Computer Manufacturers Association

They couldn't think of a better name

Working title: ECMA Script (ecc-ma)


---

#= Foot Guns

Note: Things you can shoot yourself with in the foot

---

#= Global Variables
Note: Incidently, first listing in The Good Parts - Appendix A - The Awful Parts
---

<p></p>
#> > ans = "";
#> > function question() {<br>> &nbsp; var ans = 42; <br>> &nbsp; return ans;<br>> }
#> > console.log(ans);
#> ""
#> > console.log(question());
#> 42
#> > console.log(ans);
#> 42
---
<p></p>
#> > ans = ""; <c>// global
#> > function question() {<br>> &nbsp; var ans = 42; <c> // local</c> <br>> &nbsp; return ans;<br>> }
#> > console.log(ans);
#> ""
#> > console.log(question());
#> 42
#> > console.log(ans);
#> 42
---
#> <c>//ruby</c>
#> <h>@</h>ans = 42;
#>
#> <c>//python</c>
#> <h>global</h> ans = 42;
#> 
#> <c>//java
#> <h>public</h> static ans = 42;
Note: Because every other language has locals by default
---
#= Overloaded<br>`+` operand
---
<p></p>
#>  > 4 + 2 
#> 6
#> > 4 - 2
#> 2
#> > "4" - 2 
#> 2 
#> > "4" + 2
#> "42"
---
<p></p>
#>  > 4 + 2 
#> 6
#> > 4 - 2
#> 2
#> > "4" - 2 
#> 2 <c>&nbsp;&nbsp; // type -> integer</c>
#> > "4" + 2
#> "42"<c> // type -> string</c>
Note: `+` for both additon and concatenation
---

#= Equality<br>and<br>Type Coersion
---
<p></p>
#> > 0 ==&nbsp; false  
#> true
#> > 0 === false  
#> false
#> > 1 == &nbsp;"1"
#> true 
#> > 1 === "1" 
#> false
---
<p></p>
#> > 0 ==&nbsp; false  
#> true
#> > 0 === false  
#> false
#> > 1 == &nbsp;"1" <c> // equality</c> 
#> true 
#> > 1 === "1" <c>// equality without</c>
#> false &nbsp; &nbsp; &nbsp; <c>// type coersion</c>

Note: This was picked up v. early by Brendan Eich

But because legacy, the standards committee didn't accept the change to `==`

forced creation of `===`


---

#= More Gotchas
Note: Combination of original 'Bad Parts', 'Awful Parts', and some new Fun
---
##= `typeof`
---
#> > typeof Object()
#>- "object"
#>- > typeof String()
#>- "string"
#>- > typeof Number()
#>- "number"
#>- > typeof null
#>- "object"  <r>// ;&#95;;</r>
#>- > typeof NaN
#>- "number" <r>// ;&#95;;</r>
Note: even JScript dutifully reverse engineered this error
---
##= `NaN`
---
#> > typeof NaN
#> "number"
#>- > NaN === NaN
#>- false
#>- > NaN !== NaN
#>- true
#>- > isFinite(NaN)
#>- false
---
##= `parseInt`
---
#> > parseInt("123")
#>- 123
#>- > parseInt("123 bunnies")
#>- 123
#>- > parseInt("04")
#>- 4
#>- > parseInt("08")
#>- 0 
---
##= Extended Character Set
---
#> > "abc".split("")
#>- ["a","b","c"]
#>- > "<img src="pictures/rabbit.svg" class="e" style="margin: 0"><img src="pictures/cat.svg" style="margin: 0" class="e">".split("")
#>- ["�","�","�","�"]
#>- > Array.from("<img src="pictures/rabbit.svg" class="e" style="margin: 0"><img src="pictures/cat.svg" style="margin: 0" class="e">")
#>- ["<img src="pictures/rabbit.svg" class="e" style="margin: 0">","<img src="pictures/cat.svg" style="margin: 0" class="e">"]
---

##= This thing
##= `++[[]][+[]]+[+[]]`

---
#> > ++[[]][+[]]+[+[]]
#>- 10
#>- > []
#>- ""
#>- > +[]
#>- 0
---
#> > [[]][+[]]
#>- ""
#>- > +[[]][+[]]
#>- 0
#>- > ++[[]][+[]]
#>- 1
#>- > ++[[]][+[]] + [+[]]
#>- 10

---

#= Security
---
##= `eval`

Note: executing arbitary code. 

We can create not easily readable code


---

##= Cross Site Scripting
Note: 
---
##= Cross Site Request Forgery
Note: 
---
##= See: Hack the Planet
### Tutorial, 10am Wednesday
###- (will not be recorded)
---
#= ...
Note: so,that's what javascript can do. what if you say
---
##= (╯°□°）╯︵ sʇɐʍ ʎɔɐƃǝl
Note: I dont want to deal with all that stuff
---

#= Frameworks
---

##= MooTools
Note: MooTools was a really good thing back in the day

I've only come across it when I tasked to remove it
---

##= jQuery
Note: so much extension 

at one point ~90% of websites had it
---

##= BootStrap
Note: more than JS; CSS, HTML
Adding more functionality so you dont have to worry about responsive websites

But you can spot a bootstraped wbesite from a mile away
---

#= The new Hotness
---
##= Meteor
##= React
##= Angular
---
#= ...
Note: but what if you sasy
---
##= (╯°□°）╯︵ ʇdᴉɹɔsɐʌɐɾ
Note: stuff javascript all together
---

##= CoffeeScript
Note: CoffeeScript is a little language that compiles into JavaScript. Underneath that awkward Java-esque patina, JavaScript has always had a gorgeous heart.
---
##= TypeScript
Note: TypeScript lets you write JavaScript the way you really want to. TypeScript is a typed superset of JavaScript that compiles to plain JavaScript

See Typehints in JS talk from PyCon AU 2015
---
##= PureScript
Note: 
---
##= (╯°□°）╯︵ ƃuᴉuɹɐǝl
Note: I want to work in my favourite language, and still work in the browser
---
##= Pick a language.
##= Any language.

Note: 

---
###= github.com/jashkenas/coffeescript/wiki/<br>List-of-languages-that-compile-to-JS
---
#= Batavia
@ pybee.png
---
#= ...
---
##= ┬javascript┬ ノ( ゜-゜ノ) 
---
##= JavaScript outside<br>the browser
---
##= node.js
Note: serverside js
---
##= Electron
Note: not the first time JS has been used on the desktop
---
##= Google Gadgets
Note: iGoogle and Google Desktop widget - scripting by javascript on the desktop
---
##= As a scripting language

Note: NginScript, Cinnamon
---

##= Even more gotchas
---

##= Function Optimisation
---
<pre><code>'use strict';

function add(x, y) {
<c style="font-weight:normal">&nbsp; // I am the very model of a modern Major-General
&nbsp; // I've information vegetable, animal, and mineral
&nbsp;  // I know the kings of England, and I quote the fights historical
&nbsp;  // From Marathon to Waterloo, in order categorical
&nbsp;  // I'm very well acquainted, too, with matters mathematical
&nbsp;  // I understand equations, both the simple and quadratical
&nbsp;  // About binomial theorem I'm teeming with a lot o' news
&nbsp;  // With many cheerful facts about the square of the hypotenuse
&nbsp;  // I'm very good at integral and differential calculus
&nbsp;  // I know the scientific names of beings animalculous
</c>
&nbsp;  return(x + y);
}
</code></pre><pre style="margin-top: -1em;"><code>for(let i = 0; i < 500000000; i++) {
&nbsp; if (add(i, i++) < 5) {
&nbsp; &nbsp;  <c>//</c>
&nbsp; }
}
</code></pre>

- <pre><code>$ time -p node general.js</code></pre><br><pre style="margin-top:-1em"><code>real 1.68</code></pre>
---
<pre><code>'use strict';

function add(x, y) {
<c style="font-weight:normal">&nbsp; // I am the very model of a modern Major-General
&nbsp; // I've information vegetable, animal, and mineral
&nbsp;  // I know the kings of England, and I quote the fights historical
&nbsp;  // From Marathon to Waterloo, in order categorical
&nbsp;  // I'm very well acquainted, too, with matters mathematical
&nbsp;  // I understand equations, both the simple and quadratical
&nbsp;  // About binomial theorem I'm teeming with a lot o' news
&nbsp;  // With many cheerful facts about the square of the hypotenuse
&nbsp;  // I'm very good at integral and differential calculus
&nbsp;  // 
</c>
&nbsp;  return(x + y);
}
</code></pre><pre style="margin-top: -1em;"><code>for(let i = 0; i < 500000000; i++) {
&nbsp; if (add(i, i++) < 5) {
&nbsp; &nbsp;  <c>//</c>
&nbsp; }
}
</code></pre>

- <pre><code>$ time -p node general.js</code></pre><br><pre style="margin-top:-1em"><code>real 0.67</code></pre>
---

#= JavaScript<br>is improving

---

#= ECMAScript 5

---

#>  ES3> parseInt("08") 
#>- 0 
#>- ES5> parseInt("08") 
#>- 8 
#>- ESx> parseInt("08",10) <c>//base 10</c>
#>- 8
Note: assumed to be octal unless you have ECMAScript 5. 
Supply radix to be cross compatible. 
---
#= ECMAScript 6
---
##= Fixing Global Variables
---
##= `let`
---
##= Modules

---
#= ECMAScript 5/6 Adpotion
---
##= kangax.github.io/compat-table/es5/
##= kangax.github.io/compat-table/es6/
---
#= Non-standard 'Standards'
---
##= `console.log`
Note: Not actually a standard :D TODO `%c`
---
#= Polyfill
Note: Adding new funcionality in JS to JS by adding more JS
---
#= Want it now?
---
##= Polyfill `console.log`
#>- window.console =<br> &nbsp;typeof window.console<br>&nbsp; &nbsp; === 'undefined' <br>&nbsp; &nbsp;? {log:function(str){<br> &nbsp; &nbsp; alert(str) }} <br>&nbsp; &nbsp;: window.console;<br> 
#>- console.log("oh goodness.");<br>

---
#= JavaScript isn't awful
---
#= JavaScript is awe-ful
Note: It's amazing that we can take something so broken and made so much

The devil you know
---
> ... when that's the glue of the modern day web it's minor miracle that society even functions
---
#= But just remember...
##- other languages have wats
---

#= <pre>#!/usr/bin/env java</pre>

Note: Let's about about Java

---
#> <c>/&#42;&#42; read from a file &#42;&#42;/</c>
#>- filename = "myfile.txt"
#>- BufferedReader reader = <br>&nbsp; &nbsp; &nbsp; new BufferedReader( <br>&nbsp; &nbsp; &nbsp; &nbsp;  new InputStreamReader( <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  new FileInputStream(<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  filename<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  )<br>&nbsp; &nbsp; &nbsp; &nbsp;  )<br>&nbsp; &nbsp; &nbsp; );<br>&nbsp;
---
#= <pre>/usr/bin/ruby</pre>
Note: Let's talk about ruby
---
#>  irb> open source rocks
#>- NameError: undefined local<br>variable or method `rocks'
#>- irb> def method_missing(@args)<br> &nbsp; &nbsp; &nbsp;  args.join(" ")<br> &nbsp; &nbsp; end
#>- irb> open source rocks
#>- "open source rocks"
Note: Method Missing is evil monkey patching
---

#= <pre>/usr/local/bin/ghci</pre>
Note: Let's talk about Haskell
---

#>  λ> :type [1,2]
#>- [1,2] :: Num t => [t]
#>- λ&gt; length [1,2]
#>- 2
#>- λ> :type (1,2)
#>- (1,2) :: (Num t, Num t1) => (t, t1)
#>- λ> length (1,2)
#>- 1

Note: because foldable, fMap fun
---

#= <pre>/usr/local/bin/ghci</pre>
Note: Let's talk about Haskell
---
#> λ> let a = 2 + 2
#>- λ> a
#>- 4
#>- λ> let b = 2 + 2 where 2 + 2 = 5
#>- λ> b
#>- 5

---
#= <pre>/usr/local/bin python</pre>
Note: Let's talk about Python
---
#> >>> a = 256
#>- >>> b = 256
#>- >>> a **is** b
#>- True

<span class="dasfoot"><a href="www.youtube.com/watch?v=sH4XF6pKKmk">Investigating Python Wats</a></span>
---
#>  >>> a = 257
#>- >>> b = 257
#>- >>> a **is** b
#>- False
#>- <br>>>> a = 257; b = 257
#>- >>> a **is** b
#>- True

<span class="dasfoot"><a href="www.youtube.com/watch?v=sH4XF6pKKmk">Investigating Python Wats</a></span>
---

#= <pre>/usr/bin/env perl -de1</pre>
Note: Let's talk about Perl

---

#> DB&lt;1> if ("foo" == "bar") <br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { print "true" }<br> &nbsp;&nbsp; &nbsp; else { print "false" }
#>- true
<span class="dasfoot"><a href="http://stackoverflow.com/a/14046720/124019">http://stackoverflow.com/a/14046720/124019</a></span>
Note: Reason is `==` is for number comparing

eq is for string comparing

a new programmer won't know this. 
---


#= <pre>/usr/bin/php -a</pre>

Note: Let's talk about PHP
---
#> php>  $a = INF;
#>- $b = array(); 
#>- $c = (object)array();
#>- var_dump( $a < $b );
#>- true 
#>- var_dump( $b < $c );
#>- true 
#>- var_dump( $c < $a );
#>- true 

Note: cyclic truthiness. Totally a thing. 

<span class="dasfoot"><a href="http://phpsadness.com/sad/52">http://phpsadness.com/sad/52</a></span>
Note: 


---

#= <pre>C:\> powershell</pre>

Note: Let's talk about powershell

---

#> PS> if (2 > 1) { "true" }<br>&nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; else { "false" }
#>-  true
#>- <br>PS> if (2 < 1) { "true" }<br>&nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; else { "false" }
#>- The '<' operator is reserved<br>for future use.

<span class="dasfoot"><a href="http://fuckpowershell.tumblr.com/">F Powershell</a></span>
---

#= All lanauges are<br>pretty terrible.
---
<br><br>
##= Cheers!
<br><br>
@ footer.svg
