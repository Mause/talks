#> <c>// If you can read this, yay!
#> <s>123456789 123456789 123456789 12</s>
#> > console.log("Hello World");
#> Hello World
#> <h>!#/usr/bin/env ruby</h>
#> > (0..3).each {|c| puts c}
#> 0
#> 1
#> 2
#> 3
#> => 0..3  <c>// Console is 11x32 </c>
---

<br>
<br>
# JavaScript is Awe-ful
<br>
@ footer.svg
---

@^ javascript_book.png

Note: Tapestry and Cooking and Yelling

---

#= Global Variables
---
<p></p>
#> > ans
---
#>  > ans = "";
#>- > function question() {<br>> &nbsp; var ans = 42;<br>> &nbsp; return ans;<br>> }
#>- > console.log(ans);
#>- ""
#>- > console.log(question());
#>- 42
#>- > console.log(ans);
#>- ""
---
<p></p>
#> > ans = "";
#> > function question() {<br>> &nbsp; <s>var</s> ans = 42; <br>> &nbsp; return ans;<br>> }
#> > console.log(ans);
#> ""
#> > console.log(question());
#> 42
#> > console.log(ans);
#> 42
---
#= Duck Typing
Note: if it looks like a duck and sounds like a duck, it's a duck.
---
#>  > 4 + 2 
#>- 6
#>- > 4 - 2
#>- 2
#>- > "4" - 2 
#>- 2 
#>- > "4" + 2
#>- "42"
---
#= Arrays and Objects
---
#> > [] + []
#>- ""
#>- > [] + {}
#>- [object Object]
#>- > {} + []
#>- 0
#>- > {} + {}
#>- NaN

Note: Associativity? Pfft! Transativity? Hahahah
---

#= Arrays != Objects
---
#>  > var arr = ['a', 'b', 'c']
#>- > arr
#>- ["a", "b", "c"]
#>- > arr.hello = "world"
#>- "world"
#>- > arr
#>- ["a", "b", "c"]
---
#> > for (var k in arr) {<br>>&nbsp;&nbsp; console.log(k);<br>> }
#>- 0<br>1<br>2<br>hello
---
#>  > arr.push("append");
#>- 4
#>- > c = 0;
#>- > for (var k in arr) {<br>>&nbsp; &nbsp; c = c + 1; <br>> }
#>- > c
#>- 5
#>- > arr.length
#>- 4
---
#= Equality
---
#>  > 0 ==&nbsp; false  
#>- true
#>- > 1 == &nbsp;"1"
#>- true 
#>- > 0 === false  
#>- false
#>- > 1 === "1"
#>- false
---
#= Developers get a bit<br>upset at JavaScript
---
=> "... please don't hire me for my JS abilities. i'm proficient enough to loath the language intensely"
Note: experienced developers get frustrated with it
---

=> "... I have been around him when he hacks JS. Let's just say Satan himself would blush."
Note: people near to javascript developers hear them swear.  A lot.
---

=> Have to modify some JavaScript<br>I did over a year ago. 
> 
> 'What is this?'
>
> 'Why did I ...?'
>
> 'What sort of name is that!'"

Note: confusing syntax, hard to come back to 

---

=> "I hate writing JavaScript.
>
> I know, I'll write some JavaScript to fix it."
>
> This is how Angular happens.

Note: Pot shots at the Language
---
#= ...
---
#= Why?
Note: why is javascript so awful
---

#= History.zip
##- See "Crockford on JavaScript"
Note: I don't have time to tell the entire history of javascript

Check out the YUI Theatre series 

---

###= JavaScript was developed in 10 days
### by Brendan Eich for Netscape
### to offer a lightweight version of Java
### in order to compete for users with Microsoft
---


###= JavaScript was developed in 10 days
### &nbsp;
### &nbsp;
### &nbsp;
Note: awfully short development time

---
###= JavaScript was developed in 10 days
### by Brendan Eich for Netscape
### &nbsp;
### &nbsp;
Note: 
Eich originally wanted to make scheme

Sure, they said

Oh wait, that's scheme
---
#> > (define hello-world
#> >&nbsp; (lambda ()
#> >&nbsp; &nbsp; (begin
#> >&nbsp; &nbsp; &nbsp; (write ‘Hello-World)
#> >&nbsp; &nbsp; ) 
#> >&nbsp; )
#> > )
#> > 
#> > (hello-world)
#> Hello-World
#> 
---
###= JavaScript was developed in 10 days
### by Brendan Eich for Netscape
### &nbsp;
### &nbsp;

Note: For user adoption, maybe it wasn't the best
---

###= JavaScript was developed in 10 days
### by Brendan Eich for Netscape
### to offer a lightweight version of Java
### &nbsp;


Note: so Eich made it look like Java, basing it a bit on Scheme and Self as well

Originally called LiveScript. Changed to JavaScript because it was kinda based on int

But Sun owned the trademark, so Sun owned the JavaScript trademark

Which is now owned by Oracle

---

###= JavaScript was developed in 10 days
### by Brendan Eich for Netscape
### to offer a lightweight version of Java
### in order to compete for users with Microsoft

Note: Mosaic split into NetScape in SpyGlass

Netscape says: "we're going to wipe out MS!"

MS says: "whoops, buying spyglass"

race was on to develop the scriting language to make the web better

Because trademark, MS reverse engineered JS, called it JScript


---

##= ECMAScript Standard

Note: Because of some fun issues, Tim Berners Lee and W3C wouldn't do the standard
 
TBL was apparently upset that Netscape took his simple design and made it silly

with things like images and formatting



They ended up at the

European Computer Manufacturers Association

They couldn't think of a better name

Working title: ECMA Script (ecc-ma)


---

##= JavaScript™

<span class="dasfoot"><a href="http://tsdr.uspto.gov/#caseNumber=75026640&caseType=SERIAL_NO&searchType=statusSearch">US Trademark &#35;75026640</a></span>
Note: 
---

#= Foot Guns

Note: Things you can shoot yourself with in the foot

---
#> window.console = typeof window.console === 'undefined' 
#> &nbsp; &nbsp; ? {log:function(str){ alert(str) }} 
#> &nbsp; &nbsp; : window.console;
#> <br>console.log("oh good god.");


---
#= JavaScript isn't awful
---
#= JavaScript is awe-ful
Note: It's amazing that we can take something so broken and made so much

The devil you know
---
<br><br>
> ... when that's the glue of the modern day web it's minor miracle that society even functions
>
>  -- @NamTaf
---
#= But just remember...
##- other languages have wats
---

#= <pre>#!/usr/bin/env java</pre>

Note: Let's about about Java

---
#> <c>/&#42;&#42; read from a file &#42;&#42;/</c>
#>- filename = "myfile.txt"
#>- BufferedReader reader = <br>&nbsp; &nbsp; &nbsp; new BufferedReader( <br>&nbsp; &nbsp; &nbsp; &nbsp;  new InputStreamReader( <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  new FileInputStream(<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  filename<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  )<br>&nbsp; &nbsp; &nbsp; &nbsp;  )<br>&nbsp; &nbsp; &nbsp; );<br>&nbsp;
---
#= <pre>/usr/bin/ruby</pre>
Note: Let's talk about ruby
---
#>  irb> open source rocks
#>- NameError: undefined local<br>variable or method `rocks'
#>- irb> def method_missing(@args)<br> &nbsp; &nbsp; &nbsp;  args.join(" ")<br> &nbsp; &nbsp; end
#>- irb> open source rocks
#>- "open source rocks"
Note: Method Missing is evil monkey patching
---

#= <pre>/usr/local/bin/ghci</pre>
Note: Let's talk about Haskell
---

#>  λ> :type [1,2]
#>- [1,2] :: Num t => [t]
#>- λ&gt; length [1,2]
#>- 2
#>- λ> :type (1,2)
#>- (1,2) :: (Num t, Num t1) => (t, t1)
#>- λ> length (1,2)
#>- 1

Note: because foldable, fMap fun
---

#= <pre>/usr/local/bin/ghci</pre>
Note: Let's talk about Haskell
---
#> λ> let a = 2 + 2
#>- λ> a
#>- 4
#>- λ> let b = 2 + 2 where 2 + 2 = 5
#>- λ> b
#>- 5

---
#= <pre>/usr/local/bin python</pre>
Note: Let's talk about Python
---
#> >>> a = 256
#>- >>> b = 256
#>- >>> a **is** b
#>- True

<span class="dasfoot"><a href="www.youtube.com/watch?v=sH4XF6pKKmk">Investigating Python Wats</a></span>
---
#>  >>> a = 257
#>- >>> b = 257
#>- >>> a **is** b
#>- False
#>- <br>>>> a = 257; b = 257
#>- >>> a **is** b
#>- True

<span class="dasfoot"><a href="www.youtube.com/watch?v=sH4XF6pKKmk">Investigating Python Wats</a></span>
---

#= <pre>/usr/bin/env perl -de1</pre>
Note: Let's talk about Perl

---

#> DB&lt;1> if ("foo" == "bar") <br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { print "true" }<br> &nbsp;&nbsp; &nbsp; else { print "false" }
#>- true
<span class="dasfoot"><a href="http://stackoverflow.com/a/14046720/124019">http://stackoverflow.com/a/14046720/124019</a></span>
Note: Reason is `==` is for number comparing

eq is for string comparing

a new programmer won't know this. 
---


#= <pre>/usr/bin/php -a</pre>

Note: Let's talk about PHP
---
#> php>  $a = INF;
#>- $b = array(); 
#>- $c = (object)array();
#>- var_dump( $a < $b );
#>- true 
#>- var_dump( $b < $c );
#>- true 
#>- var_dump( $c < $a );
#>- true 

Note: cyclic truthiness. Totally a thing. 

<span class="dasfoot"><a href="http://phpsadness.com/sad/52">http://phpsadness.com/sad/52</a></span>
Note: 


---

#= <pre>C:\> powershell</pre>

Note: Let's talk about powershell

---

#> PS> if (2 > 1) { "true" }<br>&nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; else { "false" }
#>-  true
#>- <br>PS> if (2 < 1) { "true" }<br>&nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; else { "false" }
#>- The '<' operator is reserved<br>for future use.

<span class="dasfoot"><a href="http://fuckpowershell.tumblr.com/">F Powershell</a></span>
---

#= All lanauges are<br>pretty terrible.
---
<br><br>
##= Cheers!
<br><br>
@ footer.svg
