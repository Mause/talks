#= <br>.thick[What is deployment, anyway?]
## .thick[PyGotham 2019]
@ footer.svg

Note: breathe, Katie!

You got this

# ðŸ’ª
---
@ whatis_copy.png


Note: 
Hi! I'm katie, and this isn't the talk you're expecting. 

---

##= .thin[What this talk isn't.]

Note: 
this isn't a talk about "the way" to deploy your app

This isn't a state of the union, a dive into any particualr 
part of the process. 

This talk is more describing the complexities around the process, and, inessense. 
TODO: Ensure this is accurate
---


#= .thin[What .b[is] deployment,<br>anyway?]

Note: 
We'll discuss, well ,what is deployment, anyway? 

---
#= .thin[What is .prokyon[django] deployment,<br>anyway?]
Note: and specifically within the context of deploying a django application. 

But I'm choosing django here for a reason, which will become apparaent later. 
---
#= Points of interest
## out of the box .prokyon[django]
## complexities
## helpers

Note: we'll be taking a journey today, so instead of an agenda, here are at least a few points of interest along our trip. 
TODO: ensure this is accurate

---
#= .prokyon[django] 2.2.5
# .flux[python] 3.7.4

Note: the versions I'm targetting today are specifically django 2.2.5 and python 3.7.4

If you're joining me on YouTube from the year 2027, I'm sorry, things have changed since, but hopefully you find value in this talk!

---
##= no extra addons

Note: we're also just going to stick to base django

No addons, no cookiecutter templates. This talk should be useful if you're anywhere from looking at django

to having your djangogirls tutorial project working on your laptop

to a more complex setup, but no extra complexities. 

TODO: is "addons" the best word here?

---

##= Let's look at .prokyon[django] 

Note: so let's get started, by taking a look at django as it comes out of the box

---
$$terminal bash
$$prompt ~/git/glasnt/ 
$$w
---
$$terminal bash
$$prompt ~/git/glasnt/ 
$$w pip install django
---
$$terminal bash
$$prompt ~/git/glasnt/
pip install django<br> 
Collecting django<br>
...<br>
Successfully installed django-2.2.5<br>
$$prompt ~/git/glasnt
$$w 
---
$$terminal bash
$$prompt ~/git/glasnt/
pip install django<br> 
Collecting django<br>
...<br>
Successfully installed django-2.2.5<br>
$$prompt ~/git/glasnt
$$w django-admin startproject myproject
---
$$terminal bash
$$prompt ~/git/glasnt/
pip install django<br> 
Collecting django<br>
...<br>
Successfully installed django-2.2.5<br>
$$prompt ~/git/glasnt
django-admin startproject myproject<br>
$$prompt ~/git/glasnt
$$w 
---
$$terminal bash
$$prompt ~/git/glasnt/
pip install django<br> 
Collecting django<br>
...<br>
Successfully installed django-2.2.5<br>
$$prompt ~/git/glasnt
django-admin startproject myproject<br>
$$prompt ~/git/glasnt
$$w cd myproject
---
$$terminal bash
$$prompt ~/git/glasnt/
pip install django<br> 
Collecting django<br>
...<br>
Successfully installed django-2.2.5<br>
$$prompt ~/git/glasnt
django-admin startproject myproject<br>
$$prompt ~/git/glasnt
cd myproject<br>
$$prompt ~/git/glasnt/myproject
$$w
---
$$terminal bash
$$prompt ~/git/glasnt/
pip install django<br> 
Collecting django<br>
...<br>
Successfully installed django-2.2.5<br>
$$prompt ~/git/glasnt
django-admin startproject myproject<br>
$$prompt ~/git/glasnt
cd myproject<br>
$$prompt ~/git/glasnt/myproject
$$w ls -R
---
$$terminal bash
$$prompt ~/git/glasnt/
pip install django<br> 
Collecting django<br>
...<br>
Successfully installed django-2.2.5<br>
$$prompt ~/git/glasnt
django-admin startproject myproject<br>
$$prompt ~/git/glasnt
cd myproject<br>
$$prompt ~/git/glasnt/myproject
ls -R<br>
.:<br>
manage.py  myproject<br>
<br>
./myproject:<br>
âŽ½âŽ½init__.py  settings.py  urls.py  wsgi.py<br>
$$prompt ~/git/glasnt/myproject
$$w
---
$$terminal bash
$$prompt ~/git/glasnt/myproject
$$w 
---
$$terminal bash
$$prompt ~/git/glasnt/myproject
$$w python manage.py runserver

Note: we can launch our app locally, using runserver
---
$$terminal bash
$$prompt ~/git/glasnt/myproject
.noop[p]ython manage.py runserver<br>
Watching for file changes with StatReloader<br>
Performing system checks...<br>
System check identified no issues (0 silenced).<br><br>
.rf[You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.<br>Run 'python manage.py migrate' to apply them.]<br<br><br><br>October 04, 2019 - 17:05:24<br>
Django version 2.2.5, using settings 'myproject.settings'<br>
Starting development server at http:.noop[/]/127.0.0.1:8000/<br>
Quit the server with CONTROL-C.<br>
$$w
Note: but we get this error

---
$$terminal bash
$$prompt ~/git/glasnt/myproject
.noop[p]ython manage.py runserver<br>
Watching for file changes with StatReloader<br>
Performing system checks...<br>
System check identified no issues (0 silenced).<br><br>
.rf[You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.<br>Run .red['python manage.py migrate'] to apply them.]<br<br><br><br>October 04, 2019 - 17:05:24<br>
Django version 2.2.5, using settings 'myproject.settings'<br>
Starting development server at http:.noop[/]/127.0.0.1:8000/<br>
Quit the server with CONTROL-C.<br>
$$w

Note: oh yay, big red error with a helpful command!

---
$$terminal bash
$$prompt ~/git/glasnt/myproject
.noop[p]ython manage.py runserver<br>
Watching for file changes with StatReloader<br>
Performing system checks...<br>
System check identified no issues (0 silenced).<br><br>
.rf[You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.<br>Run 'python manage.py migrate' to apply them.]<br<br><br><br>October 04, 2019 - 17:05:24<br>
Django version 2.2.5, using settings 'myproject.settings'<br>
Starting development server at http:.noop[/]/127.0.0.1:8000/<br>
Quit the server with CONTROL-C.<br>
$$prompt ~/git/glasnt/myproject
$$w

Note: okay, cancel out of that..
---
$$terminal bash
$$prompt ~/git/glasnt/myproject
.noop[p]ython manage.py runserver<br>
Watching for file changes with StatReloader<br>
Performing system checks...<br>
System check identified no issues (0 silenced).<br><br>
.rf[You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.<br>Run 'python manage.py migrate' to apply them.]<br<br><br><br>October 04, 2019 - 17:05:24<br>
Django version 2.2.5, using settings 'myproject.settings'<br>
Starting development server at http:.noop[/]/127.0.0.1:8000/<br>
Quit the server with CONTROL-C.<br>
$$prompt ~/git/glasnt/myproject
$$w python manage.py migrate
---
$$terminal bash
.cf[Operations to perform:]<br>
&nbsp; .tb[Apply all migrations:] admin, auth, contenttypes, sessions<br>
.cf[Running migrations:]<br>
&nbsp; Applying contenttypes.0001_initial... .gf[OK]<br>
&nbsp;  Applying auth.0001_initial... .gf[OK]<br>
&nbsp;  Applying admin.0001_initial... .gf[OK]<br>
&nbsp;  Applying admin.0002_logentry_remove_auto_add... .gf[OK]<br>
&nbsp;  Applying admin.0003_logentry_add_action_flag_choices... .gf[OK]<br>
&nbsp;  Applying contenttypes.0002_remove_content_type_name... .gf[OK]<br>
...<br>
&nbsp;  Applying auth.0009_alter_user_last_name_max_length... .gf[OK]<br>
&nbsp;  Applying auth.0010_alter_group_name_max_length... .gf[OK]<br>
&nbsp;  Applying auth.0011_update_proxy_permissions... .gf[OK]<br>
&nbsp;  Applying sessions.0001_initial... .gf[OK]<br>
$$prompt ~/git/glasnt/myproject
$$w
Note: oh wow, that's a lot of output. 

has anything changed? 
---
$$terminal bash
$$prompt ~/git/glasnt/myproject
$$w
---
$$terminal bash
$$prompt ~/git/glasnt/myproject
$$w ls -R

---
$$terminal bash
$$prompt ~/git/glasnt/myproject
ls -R<br>
.:<br>
db.sqlite3  manage.py  myproject<br>
<br>
./myproject:<br>
__init__.py  settings.py  urls.py  wsgi.py<br>
$$prompt ~/git/glasnt/myproject
$$w

---
$$terminal bash
$$prompt ~/git/glasnt/myproject
ls -R<br>
.:<br>
.red[db.sqlite3]  manage.py  myproject<br>
<br>
./myproject:<br>
__init__.py  settings.py  urls.py  wsgi.py<br>
$$prompt ~/git/glasnt/myproject
$$w
Note: oh sweet, we have a database!

---
$$terminal bash
$$prompt ~/git/glasnt/myproject
$$w

Note: Okay. Let's clear that away. 

---
$$terminal bash
$$prompt ~/git/glasnt/myproject
$$w python manage.py runserver

Note: will my project run now? 
---
$$terminal bash
$$prompt ~/git/glasnt/myproject
.noop[p]ython manage.py runserver<br>
Watching for file changes with StatReloader<br>
Performing system checks...<br><br>
System check identified no issues (0 silenced).<br>
<br>October 04, 2019 - 17:05:54<br>
Django version 2.2.5, using settings 'myproject.settings'<br>
Starting development server at http:.noop[/]/127.0.0.1:8000/<br>
Quit the server with CONTROL-C.<br>
$$w

Note: Oh neat, no more error.  
---
$$terminal bash
$$prompt ~/git/glasnt/myproject
.noop[p]ython manage.py runserver<br>
Watching for file changes with StatReloader<br>
Performing system checks...<br><br>
System check identified no issues (0 silenced).<br>
<br>October 04, 2019 - 17:05:54<br>
Django version 2.2.5, using settings 'myproject.settings'<br>
Starting development server at .red[http:.noop[/]/127.0.0.1:8000/]<br>
Quit the server with CONTROL-C.<br>
$$w

Note: and a helpful little message telling us where we're running
---
@= djangorocket.png
Note: sweet!

So now we know which bits we need
---
@= djangoadmin.png
Note: and we have the much loved django admin

---
#= .prokyon[django]
## good local development story

Note: we can get our app running locally really well. 
and a lot of this boils down to
---
<br><br><br>
# .code[runserver]

Note: runserver does everything we need to in our local system. 
---
<br><br><br>
# .code[runserver]
### local web server 
---
@= runserver_00.png
vv [âžš](https://docs.djangoproject.com/en/2.2/ref/django-admin/#runserver)
---
@= runserver_00a.png
vv [âžš](https://docs.djangoproject.com/en/2.2/ref/django-admin/#runserver)
Note: As the documentation says, runserver starts a lightweight development web server on your ocal machine. 
But. And there's a big but.
---
@= runserver_01.png
vv [âžš](https://docs.djangoproject.com/en/2.2/ref/django-admin/#runserver)
Note: do not use this server in a production setting. 
---
@= runserver_02.png 
vv [âžš](https://docs.djangoproject.com/en/2.2/ref/django-admin/#runserver)
---
<br>
# .quote["We're in the business of<br>making Web frameworks,<br>not Web servers"]
### - .prokyon[django] documentation
Note: I want to pull this out and elaborate. 

Django is an extremely stable, production ready, web framework.

Django is very good at being a web framework. 

The fact that it provides any local web server functionality at all is amazing, but the fact that it calls out that it's not for production is also very very good. 

There are other webservers you can use in production. We'll get to that. TODO ENSURE WE GET TO THIS. 
---
<br><br><br>
# .code[runserver]
### local web server<br>+ static server 
Note: on top of runserver being a local web server, it also serves our static. 
---
@= staticfiles_00.png
vv [âžš](https://docs.djangoproject.com/en/2.2/howto/static-files/#serving-static-files-during-development)
Note: again as per the documentation we have a local static files server
---
@= staticfiles_00a.png
vv [âžš](https://docs.djangoproject.com/en/2.2/howto/static-files/#serving-static-files-during-development)

Note:
it does say that this is only if we have the staticfiles app and debug set to trtrue
---
$$terminal bash
$$prompt ~/git/glasnt/myproject
$$w 
Note: Which if we check out settings file we have both.  
---

$$terminal bash
$$prompt ~/git/glasnt/myproject
$$w cat myproject/settings.py |grep staticf
---
$$terminal bash
$$prompt ~/git/glasnt/myproject
cat myproject/settings.py |grep staticf<br>
&nbsp; &nbsp; 'django.contrib.staticfiles',<br>
$$prompt ~/git/glasnt/myproject
$$w
---
$$terminal bash
$$prompt ~/git/glasnt/myproject
cat myproject/settings.py |grep staticf<br>
&nbsp; &nbsp; 'django.contrib.staticfiles',<br>
$$prompt ~/git/glasnt/myproject
$$w cat myproject/settings.py | grep DEBUG
---
$$terminal bash
$$prompt ~/git/glasnt/myproject
cat myproject/settings.py |grep staticf<br>
&nbsp; &nbsp; 'django.contrib.staticfiles',<br>
$$prompt ~/git/glasnt/myproject
cat myproject/settings.py | grep DEBUG<br>
DEBUG = True<br>
$$prompt ~/git/glasnt/myproject
$$w
---
@= staticfiles_00.png
vv [âžš](https://docs.djangoproject.com/en/2.2/howto/static-files/#serving-static-files-during-development)
Note: but, as with the runserver, there's a note telling us
---
@= staticfiles_01.png
vv [âžš](https://docs.djangoproject.com/en/2.2/howto/static-files/#serving-static-files-during-development)
Note: this is not for production use. 

While we're also looking at our default settings file
---
<br><br><br>
# .code[DATABASES]
### default: sqlite

Note: the default for our database has already been set for a local sqlite database. 

---
$$terminal bash
$$prompt ~/git/glasnt/myproject
ls -R<br>
.:<br>
.red[db.sqlite3]  manage.py  myproject<br>
<br>
./myproject:<br>
__init__.py  settings.py  urls.py  wsgi.py<br>
$$prompt ~/git/glasnt/myproject
$$w
Note: We saw this earlier in our files. 

---
$$terminal bash
$$prompt ~/git/glasnt/myproject
cat myproject/settings.py | grep sqlite -C2<br>
DATABASES = {<br>
&nbsp; &nbsp; 'default': {<br>
&nbsp; &nbsp; &nbsp; 'ENGINE': 'django.db.backends.sqlite3',<br>
&nbsp; &nbsp; &nbsp; 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),<br>
&nbsp; &nbsp; }<br>
}<br>
$$prompt ~/git/glasnt/myproject
$$w
Note: this was created due to the default DATABASES setting where sqlite is defined as the default backend. 

---

@= sqlite_00.png
vv [âžš](https://docs.djangoproject.com/en/2.2/ref/databases/#sqlite-notes)
Note: and, again, as per the documentation, sqlite is great in a 

---
@= sqlite_01.png
vv [âžš](https://docs.djangoproject.com/en/2.2/ref/databases/#sqlite-notes)
Note: development environment. 
---
#= .prokyon[django]
## ease of use in development
Note: django a really good development story

but all the helpers we used in development cannot and should not be used
in production. 

so we can't use any of these helpers 
---

#= .prokyon[django]
## complex in production

Note: which makes our production use.. complex. 
---
##= byo web server
## byo static server
## byo database

Note: django doesn't provide you wiht a webserver or database that's production ready, so you have yo use your own, but store bought is fine. We'll get to the store later.  
---
<br><BR><BR>
# .poly[Flask]
## simpler in production<br>.h3[(comparatively)]
Note: 
Compare the out of the box functionality of django to something like flask

A lot of tutorials you see out there use flask as the target of a  python web server deployment demonstration

This is because of one simple fact
---
#= .b[state]

Note: django is a stateful application. It has a database out of the box and static assets. 

Flask by default does not. It can, but out of the box, it doesn't 

---

#= stateful applications
## complex in production

Note: any application that has state is complex in production. 

This is why I chose to use django for my context

If I'd chosen flask, the discussion of deployment could be **really easy**

buyt it's not just django; any time you care about persistence you add complexity to your deployments. 

And, funnily enough, this is also mentioned in the docs

---
@= deployment_00.png
vv [âžš](https://docs.djangoproject.com/en/2.2/howto/static-files/deployment/#serving-static-files-in-production)

Note: This section which discusses static deployment has this wonnderful gem

---

@= deployment_01.png
vv [âžš](https://docs.djangoproject.com/en/2.2/howto/static-files/deployment/#serving-static-files-in-production)

Note: every production setup will be a bit different. 


---

#= .quote["Every production setup<br>will be a bit different"]
### - .prokyon[django] documentation
Note:
I'm not sure who added this line to the documentation

which has been in the docs for a decade at this point

but whoever it was was such a smart cookie. 

This is so so important.

So important it's on it's own slide. 

But this statement is so so true. 

---


#= .quote["It depends."]
### - every deployment talk ever 

Note: 

Nearly every talk I've seen on deployment includes a line likee

it depends

When trying to tell you the "one true way" to do django deployments. 

Because it's true. 

But I'm not going to use that line. I'm going to use another one. 

---

#= .quote["I'm an operations engineer. I'm not your operations engineer."]
### - @glasnt

Note: I prefer this line. 

I'm an operations engineer, I'm not your operations engineer. 

I've been a sysadmin, operations engineer, SRE, whatever you want to call it

on and off for nearly the last decade. 

I've worked for 

... web hosting providers

... platforms as a service

and now

infrastructure as a service. 

And each and every deployment is different and unqiue and beautiful and complex.

--- 
<br><br>
# to deploy a stateful app 
Note: and for any stateful application, you have at the bare minimum three major segments
---
<br><br>
# to deploy a stateful app:
## run web framework
Note: you need a way to run the web framework, whatever it is

---
<br><br>
# to deploy a stateful app:
## run web framework<br>connect to a database
Note: a way to connect to your database
---
<br><br>
# to deploy a stateful app:
## run web framework<br>connect to a database<br>serve static files
Note: and a way to serve whatever static apps you have. 

this exact trifecta is the same for Django. 
---
<br><br>
# to deploy .prokyon[django]: 
## run django<br>connect to a database<br>serve static files
Note: you need to run the web  framework, connect to a database, and serve the static. 

These are the same requirements are for any stateful application

Therefore, we can explore what a stateful application deployment means without
having to keep outselves within django itself

But, thankfully for us using django, we have some helpers. 

---
<br><BR>
# .prokyon[django] helpers
## WSGI<br>.c[migrate]<br>.c[collectstatic]

Note: in order they are wsgi compatitbility, the migrate command, and the collect static command. 

The rest (TODO) of this talk will be describing how these helpers work. 

Which will help us in exploring the options we have for deployment 
---
#= WSGI
## Web Server Gateway Interface
### ðŸ”Š *Ëˆ(h)wiskÄ“*

Note: the web server gateway interface is a python standard for web servers
---
@= wsgi_00.png
Note: again, as per the docs

i love the docs

django's proimary deployment platform

is wsgi 

! as of django 2.2!!



---
@= wsgi_01.png

Note: but as noted: the start project command sets up a simple default WSGI condig for you. 

Which we can see from our project earlier. 

---

$$terminal bash
$$prompt ~/git/glasnt/myproject
$$w
Note: in our terminal, looking at the files we have 
---
$$terminal bash
$$prompt ~/git/glasnt/myproject
$$w ls -R
Note: we can list our files
---
$$terminal bash
$$prompt ~/git/glasnt/myproject
ls -R<br>
.:<br>
db.sqlite3 manage.py  myproject<br>
<br>
./myproject:<br>
âŽ½âŽ½init__.py  settings.py  urls.py  wsgi.py<br>
$$prompt ~/git/glasnt/myproject
$$w

Note: 
---
$$terminal bash
$$prompt ~/git/glasnt/myproject
ls -R<br>
.:<br>
db.sqlite3 manage.py  myproject<br>
<br>
./myproject:<br>
âŽ½âŽ½init__.py  settings.py  urls.py  .red[wsgi.py]<br>
$$prompt ~/git/glasnt/myproject
$$w

Note: and see indeed there is a wsgi.py file 
---
$$terminal bash
$$prompt ~/git/glasnt/myproject
ls -R<br>
.:<br>
db.sqlite3 manage.py  myproject<br>
<br>
./myproject:<br>
âŽ½âŽ½init__.py  settings.py  urls.py  wsgi.py<br>
$$prompt ~/git/glasnt/myproject
$$w cat myproject/wsgi.py

Note: the contents of which... 
---
$$terminal bash
WSGI config for myproject project.<br><br>It exposes the WSGI callable as a module-level variable named 'application'.<br>For more information on this file, see<br>https:.noop[/]/docs.djangoproject.com/en/2.2/howto/deployment/wsgi/<br>"""<br>import os<br><br>from django.core.wsgi import get_wsgi_application<br><BR>os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')<br><BR>application = get_wsgi_application()<br>
$$prompt ~/git/glasnt/myproject
$$w

---

#= Deploy a .prokyon[django] app<br>with a WSGI webserver
---

#= WSGI webservers:
## .nl[[uWSGI](https://uwsgi-docs.readthedocs.io/en/latest/)]
## .nl[[gunicorn](https://gunicorn.org)]


vv ðŸŽ¥: [Î¼](https://www.youtube.com/watch?v=YoUZIzPGKT8), [wsgi](https://www.youtube.com/watch?v=CPz0s1CQsTE)
Note: some of the options you have include microwshi and gunicorn

Both of these webservers have their own cache of documentation, talks, and resources, which my slides link to. 



---

#= How do you deploy WSGI webserver?

Note: but how do you deploy a wsgi websever

There are so many options

and what you choose is going to dictate some of the options available to you later. 
---
#= .so[How do you deploy WSGI webserver?]
Note: but I have a better question

---
<br><BR>
## How much<br>custom infrastructure<br>do you want?
Note: how much custom infrastrcutre do you want? 

Because as we saw before, every production setup is a bit different

but there are plenty of options out there for you if you want to use a template that works for 
80% of cases

and if you only have a standard django app, then these are going to work for you. 
---

<br><BR>
## .so[How much<br>custom infrastructure<br>do you want?]
Note: and probably more importantly. 
--- 
<br><BR>
## How much<br>infrastructure management<br>do you want<br>to do yourself?

Note: how much infrastrcutre management do you want to do yourself?

If you are a django developer, then you probably want to develop django

you don't want to be spending your time trying to manage your infrastrcture

it's super interesting, sure, but when you want is just to get your application online, then why not pay someone who has spent the time to setup a way that works for 80% of websites 

In our setup, we don't have anything custom, so why not let someone else manage tings for you?

put in more simpler terms

---
<br><BR>
## What<br>do you want<br>to worry about?


Note:  what do you want to worry about
---

#= Managed hosting:
## Platform as a Service
## Infrastructure as a Service
vv * non-exhaustive

Note: in the managed hosting world, for the complexity of project we're talking about, there are two major options

PaaS and IaaS
---

#= Managed hosting:
## PaaS
## IaaS
vv * non-exhaustive

Note: you'll often seen these abbreviated as Paas or IaaS, because words are getting long and we're busy technologists. 

And yes, this is non-exhaustive. Within the scope of deploying a django application, these are the two major options. 

You could go as detailed as running your app on a server you have in your own home or business ("on-prem"), or trying to squeeze django into a function as a service, but these are the 20% of cases. 

I'm going to focus on the ones that are much more suited for django

---
<BR><BR>
# Platform as a Service
### worry about:<br>your .prokyon[django] app, data 

vv Example providers: Heroku, Divio, PythonAnywhere

Note: in general your platforms as service are going to be places where you provide your code to them, often fit to some sort of template, which normally includes the command to run to get your app working. This will often be uwsgi or guniconr

---
<br><BR>
# Platform as a Service
### managed for you: <br>web server, operating system,<br>hardware, storage, networking...
vv Example providers: Heroku, Divio, PythonAnywhere

Note: the things that will be managed for you include the web server (often included in whatever template you have), the operating system, the physical hardware, the storage, networking, and a whole host of other things. 

On the otherhand, if you have opinions about some of the earlier elements in this, you can jump down into 
---
<BR><BR>
# Infrastructure as a Service
### worry about:<br>your .prokyon[django] app, data<br>web server, operating system
vv Example providers: Google Cloud, Amazon Web Services, Azure
Note: IaaS. Where you can worry about your web server and operating system. 

---
<BR><BR>
# Infrastructure as a Service
### managed for you: <br>hardware, storage, networking...
vv Example providers: Google Cloud, Amazon Web Services, Azure
Note: and you pay for someone else to manage the hardware, storage, etc. 

Now this is very very much an overgeneralisation, as there is an entire other talk on the complexities of infrastrcutre as a service. 

but there is a reason I mentioned this 

---
<br><br>
# to deploy .prokyon[django]: 
## run django<br>connect to a database<br>serve static files
Note: our list of things we need to deploy a django app 

---
<br><br>
# to deploy .prokyon[django]: 
## .so[run django]<br>connect to a database<br>serve static files
Note: we've covered one

And the next one is a database. 
and here's the secret
---
##= Managed databases<br>are just a specialised<br>aaS

Note: managed databases are just specalised "as a service"

whatever bucket you want to put them in depends on your definition, if they IaaS or Paas or even Software as a service, but either way, they're a service. 

---
<br><BR>
## Managed database
### worry about:<br> your data models
vv Example providers: your PaaS or IaaS provider
Note: you define your data models in your app 
---
<br><BR>
## Managed database
### managed for you:<br>storage, backups, persistence, maintenance...
 
vv Example providers: your PaaS or IaaS provider

Note: your database host will often handle everyhitng from backups to storage (including scaling storage, which is often very good. 

These will often be available from your web server provider, which is often a very good idea because the closer your web server and database the faster you can send data between the two parts of your application. 

---

migrate command

applying migrate to your database

static

just about platform as a service

collectstatic

applying colectstatic to your app

---

actually deploying

running these commands
but also copying your code to your server
---
<br><br><BR>
# Things I didn't mention
--

### continuous deployment, monitoring, scaling, logging,<br>high availablilty, load balancing, kubernetes,<br>multi-region, zero downtime deployments,<br>blue/green deployments, A/B testing, containers,<br>configuration management, automation... 

Note: there's so much more to this topic that I just can't even hope to cover. 

Nearly each of these topics is their own entire *conference* worth of material. 

But hopefuully I've been able to help you just see a bit behind the curtain of deployment. 

---
#= <br>Thanks!
@ footer.svg
Note: I'm happy to take questions in the hallway, so we can let the next speaker get setup. Thanks!
