<br>
#= ORM: The Sequel
###= SyPy April 2018
@ footer.svg
---
#= ⚠️

Note: Before I start a word of warning
---
@= dceu18.png
&nbsp; <!-- .slide: data-background-color="#f58619" -->
<div style="-webkit-transform: rotate(-29deg);color: black;font-size: 124pt;margin-top: -400px; margin-left: 400px;z-index:100;"><b>&nbsp; .</b></div> <!-- .slide: data-background-color="#f58619" -->
Note: 
This talk is being presented next month at DjangoCon Europe

---
@= dceu18.png
&nbsp; <!-- .slide: data-background-color="#f58619" -->
<div style="-webkit-transform: rotate(-29deg);color: red;font-size: 124pt;margin-top: -400px; margin-left: 400px;z-index:100;"><b>DRAFT</b></div> <!-- .slide: data-background-color="#f58619" -->
Note: 

this talk is a work in progress. 

If you find any technical errors, or issues, please tell me **after** the talk. I"ll have my twitter and email at the end

Now, with that out of the way

*cough*. :center self:
---
! wave

Note: Hi I'm Katie 
---
@= djangologo.png

Note: And I do a bunch of things in the Django community 
---
@= dceu16.png
&nbsp; <!-- .slide: data-background-color="#302613" -->
Note: I spoke at DjangoCon Europe 16 in Budapest
---
@= dcus17.png
&nbsp; <!-- .slide: data-background-color="#c2eaf4" -->
Note: I was a mentor, and also gave a talk, at DjangoCon US 2017
---
~@ 17_bg.png
@= dcau17.png
Note: I was the organiser of djangocon australia 17
---
@= djangologo.png
Note: I'm currently serving as a Director of the Django Software Foundation
---
#= &nbsp;

Note: But I'm an absolute novice at django. I have no idea what I'm doing
---
@= djadmin.png
Note: I still see the django admin as 

---
@= djadmin_sparkles.png

Note: a magical piece of software development

---
~@ macbook.jpg
Note: But just because I'm a novice at django, doesn't mean I'm a novice at tech
---
~@ thinkpad.jpg
Note: I have over a decade of software development and systems administration behind me. 

Before getting into the Python/Django space, I was a ruby dev, working with Rails and Sinatra stacks 

But before that, around the time the magic was being removed from Django, I was in my first tech job, and using my first tech stack: 

---
@= apexlogo.png
&nbsp; <!-- .slide: data-background-color="#f8f8f8" -->

Note: Was Orale Application Express

Oracle Appplication express, also known as Apex, is a in-database web application creation suite. it comes free with Oracle XE (the free version of the database)
---
<img src="pictures/apex_window.png" style="margin-top: -50px; margin-left: -115px; max-width: 125%">

vv [StackOverflow](https://stackoverflow.com/questions/48789457/oracle-apex-version-3-2-tabindex-not-working) 

Note: Back in 2006, this was the bees knees. An entire web GUI way to build a website based on form submissions and database manpulations. I used this for years 
---
~@ apex32.jpg
Note: So much so, I was a technical reviewer for a technical book on the subject. 

Yes, I'm that much of a nerd. 
---

#= &nbsp;

Note: I haven't used APEX for years. But, there's one thing that I have an intrinstic knowledge of

---

= <h1 style="color: white;text-shadow: 1px 1px 6px black, 0 0 136px red, 0 0 51px yellow; font-family: arial; font-size: 200pt">SQL</h1>
= <h1 style="color: white;text-shadow: 1px 1px 6px black, 0 0 136px red, 0 0 51px yellow; font-family: arial; font-size:40pt">Structured Query Language</h1>

Note: SQL

It's like riding a bike. Left outer joins are always going to be a bit.. fuzzy, but I can't count the amount of times I wished there was an option of throwing a LIKE clause on search results. 


---
@= djadmin.png
Note: Getting back to Django. 

I'm still getting my head around how Django works

I mean, sure, for a sufficiently setup existing django application, the admin makes things so intuitive. 

But if you were to try and tell me how things work underneath

---
~@ fogofwar.png

Note: I would have some sort of fog of war thing going on. I can't tell what's going on. 
---
##= > *"Oh, just use the shell!"*
Note: Even worse when I'm told "Oh, just use the shell"

It's an empty space. But I've been told that this is where the actual Django magic lives 
---
= <h1 style="color: white;text-shadow: 1px 1px 6px black, 0 0 136px blue, 0 0 51px green; font-family: arial; font-size: 200pt">ORM</h1>

= <h1 style="color: white;text-shadow: 1px 1px 6px black, 0 0 136px blue, 0 0 51px green; font-family: arial; font-size: 40pt">Object Relational Mapper</h1>
Note: The ORM

The Object relational mapper

The engine that makes django go

But without context, what does that even mean?
---
#= Context

Note: Context is important. 

So for the purposes of this, let's break away from the normal. 

A number of tutorials start with a clean slate, and assume you have little to know dev experience. DjangoGirls is great for complete beginners to development

But it's not so helpful for developers who come into the space with prior knowledge

It's also not helpful for the way that I came into Django; trying to fix an existing project

So for the purposes of this, we're going to use an existing project
---
~@ hunterbird.jpg

Note: 


we're going to go bug hunting

We're going to find outselves an existing project, in this case, a field of kale, and hunt about trying to find some delicious bugs. We may not find any, but we can poke around and see what we find. 


TODO pending Recompiler release
legacy_explorer.png
So let's grab our butterfly net, our best bug chasing dress, and dive in 
---
#= Context

Note: so, our context today isn't going to be the standard blog site or news portal. 

It's going to be about something near and dear to my heart
---
#= ✨
Note: emoji
---
@^ unicodex_index.png

Note: 

If you've seen my {DjangoCon EU 2016 talk,emoji talks before}

this website would be sort of familiar to you. 

I call it.. Unicodex. It's a django-backed database of different emoji from different platforms 

On the home page there's a bunch of emoji and if you click on one

---

@^ unicodex_sparkles.png

Note: it shows you the emoji from different vendors and the versions. 

So given this website exists, we can start poking around in the shell
---
##= "Just use the shell"
Note: what they mean here is the django shell
---
$$terminal bash
$$prompt ~
cd project<br>
$$prompt ~/project
$$w ./manage.py shell

Note: which is available using the manage.py shell command
---
$$terminal python3.6
$$prompt ~
cd project<br>
$$prompt ~/project
./manage.py shell<br>
Python 3.6.3 (default, Nov  9 2017, 15:58:30)<br>
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.38)] on darwin<br>
Type "help", "copyright", "credits" or "license" for more information.<br>
(InteractiveConsole)<br>
$$w &gt;&gt;&gt;&nbsp;  

Note:

Here, we're presented with an interactive console

All shell is is a python environment where the django environment path has been loaded. 

From here you can interact with your django projet directly.

---
##= "But, how do I use the shell?"
##- *"..."*

Note: but how do I use the shell

First things first. For an SQL dev, the first thing they normally do in a foreign system is
---
##= Finding all tables
---
<pre><code><c>&dash;&dash; MySQL</c>
show tables

<c>&dash;&dash; PostgreSQL</c>
\dt

<c>&dash;&dash; Oracle</c>
<r>SELECT * <br>&nbsp; FROM</r> <l>dba</l>.<l>tables</l>
</code></pre>

Note: depending on which flavour of database is most familiar to you, you'd try and issue one of these commands

For mysql, for postgres, for oracle

But we're not in a database console, we're in the django shell. We need to use ORM codes. 

 
---
<pre><code><c>&num; ORM</c>
<c>&num; ...</c>

Note: SO! To list all the tables in a project in the django shell!...

there's no real good way. 

In order to start querying model objects, you need to import the models

In django, a project has multiple applications, or apps, and an app can have one or many models. 

The model code is the powerhouse of django. the ORM manipulates models. A lot of the logic for a django project is going to be in the model.py of it's various applications. 
But without looking at the model code, and understanding what you're looking at in order to generate the import statement, you can be at a complete loss. 

Thankfully, django is clever and has helpful methods you can call to generate a list of imports for all the models in the project
---
<pre><code><c># Generate import statements</c>
<r>from</r> django.apps <r>import</r> apps
&nbsp;
<r>for</r> app_config <r>in</r> apps.get_app_configs():
&nbsp; l <r>=</r> app_config.label
&nbsp; <r>for</r> model <r>in</r> app_config.get_models():
&nbsp; &nbsp; n <r>=</r> model._meta.object_name
&nbsp; &nbsp; <l>print</l>(<d>f'from</d> <l>{</l>l<l>}</l><d>.models import </d><l>{</l>n<l>}</l>')
</code></pre>

Note: here's some I prepared earlier

We're going to import the django apps

And iterate over all the apps that django knows about

For each of those, we're going to get all the models

and print an import statement for each

---
$$terminal python3.6
$$prompt ~/project
./manage.py shell<br>
Python 3.6.3 (default, Nov  9 2017, 15:58:30)<br>
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.38)] on darwin<br>
Type "help", "copyright", "credits" or "license" for more information.<br>
(InteractiveConsole)<br>
$$w &gt;&gt;&gt;&nbsp;  

Note: Going back to our shell
---
$$terminal python3.6
$$prompt ~/project
./manage.py shell<br>
Python 3.6.3 (default, Nov  9 2017, 15:58:30)<br>
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.38)] on darwin<br>
Type "help", "copyright", "credits" or "license" for more information.<br>
(InteractiveConsole)<br>
&gt;&gt;&gt; from django.apps import apps<br>
&gt;&gt;&gt; for app_config in apps.get_app_configs():<br>
...&nbsp; l = app_config.label<br>
...&nbsp; for model in app_config.get_models():<br>
...&nbsp; &nbsp; n = model._meta.object_name<br>
...&nbsp; &nbsp; print(f'from {l}.models import {n}')<br>
$$w ...&nbsp; 

Note: for now, we're just going to dump in that code and run it 
---
$$terminal python3.6
...&nbsp; l = app_config.label<br>
...&nbsp; for model in app_config.get_models():<br>
...&nbsp; &nbsp; n = model._meta.object_name<br>
...&nbsp; &nbsp; print(f'from {l}.models import {n}')<br>
...&nbsp;<br> 
from auth.models import Permission<br>
from auth.models import Group<br>
from auth.models import User<br>
from contenttypes.models import ContentType<br>
from sessions.models import Session<br>
from sites.models import Site<br>
from aldryn_sso.models import AldrynCloudUser<br>
from admin.models import LogEntry<br>
from unicodex.models import Codepoint<br>
from unicodex.models import Vendor<br>
from unicodex.models import VendorVersion<br>
from unicodex.models import Design<br>
$$w &gt;&gt;&gt;&nbsp;  

Note: and what we get back is some generated import statements about 

This output will have similarities across django projects

the first few in this list are pretty standard fair; authentication, sessions, sites, admin

But what we're looking for is, in a lovely happenstance, the models that match the name of the website we saw earlier -- unicodex. 
---

##= Finding the table for a model
---
<pre><code>
<c># ORM</c>
Codepoint._meta.db_table
</code></pre>
---
$$terminal python3.6
$$prompt ~/project
./manage.py shell<br>
Python 3.6.3 (default, Nov  9 2017, 15:58:30)<br>
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.38)] on darwin<br>
Type "help", "copyright", "credits" or "license" for more information.<br>
(InteractiveConsole)<br>
$$pyw
---
$$terminal python3.6
$$prompt ~/project
./manage.py shell<br>
Python 3.6.3 (default, Nov  9 2017, 15:58:30)<br>
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.38)] on darwin<br>
Type "help", "copyright", "credits" or "license" for more information.<br>
(InteractiveConsole)<br>
$$pyw Codepoint._meta.db_table
---
$$terminal python3.6
$$prompt ~/project
./manage.py shell<br>
Python 3.6.3 (default, Nov  9 2017, 15:58:30)<br>
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.38)] on darwin<br>
Type "help", "copyright", "credits" or "license" for more information.<br>
(InteractiveConsole)<br>
$$py Codepoint._meta.db_table
'unicodex_coodepoint'<br>
$$pyw

---
##= Showing all table columns
---
<pre><code>
<c># ORM</c>
Codepoint._meta.get_fields()
---
$$terminal python3.6
$$prompt ~/project
./manage.py shell<br>
Python 3.6.3 (default, Nov  9 2017, 15:58:30)<br>
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.38)] on darwin<br>
Type "help", "copyright", "credits" or "license" for more information.<br>
(InteractiveConsole)<br>
$$py Codepoint._meta.db_table
'unicodex_codepoint'<br>
$$pyw Codepoint.meta.get_fields()
---
$$terminal python3.6
$$prompt ~/project
./manage.py shell<br>
Python 3.6.3 (default, Nov  9 2017, 15:58:30)<br>
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.38)] on darwin<br>
Type "help", "copyright", "credits" or "license" for more information.<br>
(InteractiveConsole)<br>
$$py Codepoint._meta.db_table
'unicodex_codepoint'<br>
$$py Codepoint.meta.get_fields()
(&lt;ManyToOneRel: unicodex.design>, <br>
&lt;django.db.models.fields.AutoField: id>, <br>
&lt;django.db.models.fields.CharField: name>, <br>
&lt;django.db.models.fields.TextField: description>,<br> 
&lt;django.db.models.fields.CharField: codepoint>)<br>
$$pyw
---
##= Finding all tables
### via the database

Note: We can find all this information directly via the database, 

and django provides an easy way to get there
---
$$terminal bash
$$prompt ~/project
$$w ./manage.py dbshell

Note: back in our terminal, instead of running manage.py shell, we run DB shell
---
$$terminal psql
$$prompt ~/project
./manage.py dbshell<br>
psql (9.6.5, server 9.6.8)<br>
Type "help" for help.<br>
<br>
$$w db=#&nbsp;

Note: and we get an output that will be familiar to postgres devs in the audience

This particular project has a postgres backend
---
$$terminal psql
$$prompt ~/project
./manage.py dbshell<br>
psql (9.6.5, server 9.6.8)<br>
Type "help" for help.<br>
<br>
$$w db=# \dt

Note: given we know it's postgres, we cna issue the postgres list table command, and get back
---
$$terminal psql
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List of relations<br>
&nbsp;Schema |&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Name&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | Type&nbsp; |&nbsp; Owner<br>
&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;+&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;+&dash;&dash;&dash;&dash;&dash;&dash;&dash;+&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;&dash;<br>
&nbsp;public | aldryn_sso_aldrynclouduser | table | postgres<br>
&nbsp;public | auth_group&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; | table | postgres<br>
&nbsp;public | auth_group_permissions&nbsp; &nbsp; &nbsp;| table | postgres<br>
&nbsp;public | auth_permission&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | table | postgres<br>
&nbsp;public | auth_user&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | table | postgres<br>
&nbsp;public | auth_user_groups&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;  | table | postgres<br>
&nbsp;public | auth_user_user_permissions | table | postgres<br>
&nbsp;public | django_admin_log&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;  | table | postgres<br>
&nbsp;public | django_content_type&nbsp; &nbsp; &nbsp; &nbsp; | table | postgres<br>
&nbsp;public&nbsp;|&nbsp;django_migrations&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;table&nbsp;|&nbsp;postgres<br.
&nbsp;public&nbsp;|&nbsp;django_session&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;table&nbsp;|&nbsp;postgres<br>
&nbsp;public&nbsp;|&nbsp;django_site&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;table&nbsp;|&nbsp;postgres<br>
&nbsp;public&nbsp;|&nbsp;unicodex_codepoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;table&nbsp;|&nbsp;postgres<br>
&nbsp;public&nbsp;|&nbsp;unicodex_design&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;table&nbsp;|&nbsp;postgres<br>
&nbsp;public&nbsp;|&nbsp;unicodex_vendor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;table&nbsp;|&nbsp;postgres<br>
&dash;&dash;More&dash;&dash;

Note: all our tables. Note the usual suspects from earlier, auth, content, sites
---
$$terminal psql
&nbsp;public | aldryn_sso_aldrynclouduser | table | postgres<br>
&nbsp;public | auth_group&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; | table | postgres<br>
&nbsp;public | auth_group_permissions&nbsp; &nbsp; &nbsp;| table | postgres<br>
&nbsp;public | auth_permission&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | table | postgres<br>
&nbsp;public | auth_user&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | table | postgres<br>
&nbsp;public | auth_user_groups&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;  | table | postgres<br>
&nbsp;public | auth_user_user_permissions | table | postgres<br>
&nbsp;public | django_admin_log&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;  | table | postgres<br>
&nbsp;public | django_content_type&nbsp; &nbsp; &nbsp; &nbsp; | table | postgres<br>
&nbsp;public&nbsp;|&nbsp;django_migrations&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;table&nbsp;|&nbsp;postgres<br.
&nbsp;public&nbsp;|&nbsp;django_session&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;table&nbsp;|&nbsp;postgres<br>
&nbsp;public&nbsp;|&nbsp;django_site&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;table&nbsp;|&nbsp;postgres<br>
&nbsp;public&nbsp;|&nbsp;unicodex_codepoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;table&nbsp;|&nbsp;postgres<br>
&nbsp;public&nbsp;|&nbsp;unicodex_design&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;table&nbsp;|&nbsp;postgres<br>
&nbsp;public&nbsp;|&nbsp;unicodex_vendor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;table&nbsp;|&nbsp;postgres<br>
&nbsp;public&nbsp;|&nbsp;unicodex_vendorversion&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;table&nbsp;|&nbsp;postgres<br>
(16 rows)<br>
<br>
$$w db=#&nbsp;

Note: but also, our own project's tables

We'll take note of these for later. 
---
##= Show all table contents

Note: so now that we know there are tables, we'd like to see what's inside them 
---
<pre><code>
<c>&dash;&dash; SQL</c>
<r>SELECT * <br>&nbsp; FROM</r> <l>unicodex_codepoint;</l>
<br><br>
</code></pre>

Note: in SQL, this would be your standard select star from table
---
<pre><code>
<c>&dash;&dash; SQL</c>
<r>SELECT * <br>&nbsp; FROM</r> <l>unicodex_codepoint;</l>

<c>&num; ORM</c>
Codepoint.objects.all()
</code></pre>

Note: in the oRM, this maps to Codepoint, the model, dot objects dot all

Just list all of them
---
$$terminal python3.6
$$prompt ~/project
./manage.py shell<br>
Python 3.6.3 (default, Nov  9 2017, 15:58:30)<br>
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.38)] on darwin<br>
Type "help", "copyright", "credits" or "license" for more information.<br>
(InteractiveConsole)<br>
$$pyw
Note: back over in our console, before we can call Codepoint, we need to use that import statement we generated earlier
---
$$terminal python3.6
$$prompt ~/project
./manage.py shell<br>
Python 3.6.3 (default, Nov  9 2017, 15:58:30)<br>
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.38)] on darwin<br>
Type "help", "copyright", "credits" or "license" for more information.<br>
(InteractiveConsole)<br>
$$pyw from unicodex.models import Codepoint

Note: from unicodex dot models import codepoint
---
$$terminal python3.6
$$prompt ~/project
./manage.py shell<br>
Python 3.6.3 (default, Nov  9 2017, 15:58:30)<br>
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.38)] on darwin<br>
Type "help", "copyright", "credits" or "license" for more information.<br>
(InteractiveConsole)<br>
$$py from unicodex.models import Codepoint
$$pyw 

Note: after we hit enter, we'll get no output, which is good, because this was successfully imported.
---
$$terminal python3.6
$$prompt ~/project
./manage.py shell<br>
Python 3.6.3 (default, Nov  9 2017, 15:58:30)<br>
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.38)] on darwin<br>
Type "help", "copyright", "credits" or "license" for more information.<br>
(InteractiveConsole)<br>
$$py from unicodex.models import Codepoint
$$pyw Codepoint.objects.all()

Note: then we make our codepoint dot objects dot all call
---
$$terminal python3.6
$$prompt ~/project
./manage.py shell<br>
Python 3.6.3 (default, Nov  9 2017, 15:58:30)<br>
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.38)] on darwin<br>
Type "help", "copyright", "credits" or "license" for more information.<br>
(InteractiveConsole)<br>
$$py from unicodex.models import Codepoint
$$py Codepoint.objects.all()
&lt;QuerySet [&lt;Codepoint: Sparkles>, &lt;Codepoint: Unicorn>, &lt;Codepoint: Two Hearts>]><br>
$$pyw

Note: and we get back a queryset of objects

We remember from earlier that there were sparkles, unicorns and hearts on our page, so we're getting the right data!

The return value here is known as a queryset, an unordered objects. QuerySets can be enacted upon further, which we'll see later.


**Query set is not a list**

---
##= Show specific table contents

Note: now that we can see all the things, how about just some of the things
---
<pre><code>
<c>&dash;&dash; SQL</c>
<r>SELECT * <br>&nbsp; FROM</r> <l>unicodex_codepoint c</l><br>&nbsp;<r>WHERE</r> <l>c</l>.<l>name</l> <r>=</r> 'Sparkles'; 
<br><br>
</code></pre>

Note: the SQL would be familiar

Adding a where clause for, say, sparkles
---
<pre><code>
<c>&dash;&dash; SQL</c>
<r>SELECT * <br>&nbsp; FROM</r> <l>unicodex_codepoint c</l><br>&nbsp;<r>WHERE</r> <l>c</l>.<l>name</l> <r>&equals;</r> 'Sparkles'; 

<c>&num; ORM</c>
Codepoint.objects.filter(<r>name&equals;</r>'Sparkles')
</code></pre>

Note: this maps to the ORM as filter. where the name column is a keyword argument of filter. 


---
$$terminal python3.6
$$py from unicodex.models import Codepoint
$$pyw Codepoint.objects.filter(name='Sparkles')

Note: so in our fresh terminal, we import Codepoint

Then run our filter
---
$$terminal python3.6
$$py from unicodex.models import Codepoint
$$py Codepoint.objects.filter(name='Sparkles')
&lt;QuerySet [&lt;Codepoint: Sparkles>]><br>
$$pyw
Note: and we get back a queryset with a single object: sparkles
---
##= Get specific record

Note: we can also just return one specific record, instead of a queryset
---
$$terminal python3.6
$$py from unicodex.models import Codepoint
$$py Codepoint.objects.filter(name='Sparkles')
&lt;QuerySet [&lt;Codepoint: Sparkles>]><br>
$$pyw Codepoint.objects.get(name='Sparkles')
Note: so where last time we used filter

This time we use get
---
$$terminal python3.6
$$py from unicodex.models import Codepoint
$$py Codepoint.objects.filter(name='Sparkles')
&lt;QuerySet [&lt;Codepoint: Sparkles>]><br>
$$py Codepoint.objects.get(name='Sparkles')
&lt;Codepoint: Sparkles><br>
$$pyw

Note: and we get a single object
---
$$terminal python3.6
$$py from unicodex.models import Codepoint
$$py Codepoint.objects.filter(name='Sparkles')
&lt;QuerySet [&lt;Codepoint: Sparkles>]><br>
$$py Codepoint.objects.get(name='Sparkles')
&lt;Codepoint: Sparkles><br>
$$pyw Codepoint.objects.get()

Note: a thing to note about get 

Get will always return one and only one object

THERE CAN BE ONLY ONE

So if you try and run get, say, without any limiatations
---
$$terminal python3.6
$$py from unicodex.models import Codepoint
$$py Codepoint.objects.filter(name='Sparkles')
&lt;QuerySet [&lt;Codepoint: Sparkles>]><br>
$$py Codepoint.objects.get(name='Sparkles')
&lt;Codepoint: Sparkles><br>
$$py Codepoint.objects.get()
Traceback (most recent call last):<br>
&nbsp; File "&lt;console>", line 1, in &lt;module><br>
&nbsp; File "/usr/local/lib/python3.6/site-packages/django/db/models/manager.p y", line 85, in manager_method<br>
&nbsp; &nbsp; return getattr(self.get_queryset(), name)(&#42;args, &#42;&#42;kwargs)<br>
&nbsp; File "/usr/local/lib/python3.6/site-packages/django/db/models/query.py" , line 384, in get<br>
&nbsp; &nbsp; (self.model._meta.object_name, num)<br>
unicodex.models.MultipleObjectsReturned: get() returned more than one Codepoint -- it returned 3!<br>
$$pyw

Note: we get a MultipleObjectsReturned error

which tells us that it would have returned three Codepoint objects, which is just far too much for get to handle. 
---
##= Joins

Note: So now we come to the fun bit. Joins

Anyone who's worked with SQL for long enough will know the venn diagrams for inner joins, outer joins, left joins, right joins, and it can get a bit confusing

Thankfully, especially for someone like me who has forgotten so much SQL, the ORM makes joins a joy. 
---
<pre><code><c>&dash;&dash; SQL</c><br><r>SELECT * <br>&nbsp; FROM</r> <l>unicodex_codepoint c,<br>&nbsp; &nbsp; &nbsp; &nbsp;unicodex_design d</l><br>&nbsp;<r>WHERE</r> <l>c</l>.<l>name</l> <r>&equals;</r> 'Sparkles'<BR><r>&nbsp; &nbsp;AND</r> d.codepoint_id = c.id;
Note: say we want to join our design and codepoint tables

A codepoint has multiple designs. Sparkles has an image that shows up in Android, Apple, Facebook, etc

So we want to join on the codepoint_id on the designs table to the primary codepoint id

This is a good chunk of SQL

So what does the ORM equivelent look like?
---
<pre><code><c>&dash;&dash; SQL</c><br><r>SELECT * <br>&nbsp; FROM</r> <l>unicodex_codepoint c,<br>&nbsp; &nbsp; &nbsp; &nbsp;unicodex_design d</l><br>&nbsp;<r>WHERE</r> <l>c</l>.<l>name</l> <r>&equals;</r> 'Sparkles'<BR><r>&nbsp; &nbsp;AND</r> d.codepoint_id = c.id;<br><br><c>&num; ORM</c>
Design.objects.filter(<o><br>&nbsp;&nbsp;&nbsp;codepoint&#95;&#95;name&equals;</o>'Sparkles')
</code></pre>
Note: Design dot objects dot filter codepoint dunder name equals sparkles. 

I know right? so simple!
---
<pre><code><c>&dash;&dash; SQL</c>
<r>SELECT * <br>&nbsp; FROM</r> <l>unicodex_codepoint c,<br>&nbsp; &nbsp; &nbsp; &nbsp;unicodex_design d</l><br>&nbsp;<r>WHERE</r> <l>c</l>.<l>name</l> <r>&equals;</r> 'Sparkles'<BR><r>&nbsp; &nbsp;AND</r> d.codepoint_id = c.id; 

<c>&num; ORM</c>
Design.objects.filter(<o><br>&nbsp;&nbsp;&nbsp;codepoint&#95;&#95;name&equals;</o>'Sparkles')
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <c>^^</c> 
</code></pre>

Note: this doubleunderscore here is doing a lot of powerful things behind the scenes 

which I'll explain more in a moment. 

---
$$terminal python3.6
$$py from unicodex.models import Design
$$pyw 

Note: back to our terminal again, to execute this elegant little code snippet

We import the design model this time
---
$$terminal python3.6
$$py from unicodex.models import Design
$$pyw Design.objects.filter(codepoint&#95;&#95;name='Sparkles')
Note: and we run our filter
---
$$terminal python3.6
$$py from unicodex.models import Design
$$py Design.objects.filter(codepoint&#95;&#95;name='Sparkles')
&lt;QuerySet [&lt;Design: Sparkles Microsoft - Windows 10>, &lt;Design: Sparkles Microsoft - Windows 8.1>, &lt;Design: Sparkles Microsoft - Windows 8.0>, &lt;Design: Sparkles Facebook - 2.2>, &lt;Design: Sparkles Facebook - 1.0>, &lt;Design: Sparkles Messenger - 1.0>, &lt;Design: Sparkles Twitter - 1.0>, &lt;Design: Sparkles EmojiOne - 3.0>, &lt;Design: Sparkles EmojiOne - 2.0>, &lt;Design: Sparkles EmojiOne - 1.0>,  '...(remaining elements truncated)...']><br>
$$pyw

Note: And we get back a reeeeeeally long queryset. 

But, the resuts are truncated for us

This is so incredibly useful

Data is still there, if you iterate over the list, but the print representation specificalyl doesn't flood your terminal

(this was implemented because of a very real bug at Lawrance Journal World, where they had servers keep crashing, because the debug page was trying to be helpful and show all the data... a million objects worth..)
---
<pre><code><c>&num; ORM</c>
Design.objects.filter(<o><br>&nbsp;&nbsp;&nbsp;codepoint&#95;&#95;name&equals;</o>'Sparkles')

<c>&num; field, field, field... lookup</c>

Note: what we have here is one or more fields and then a lookup, all separated by double underscores

A lookup as an operation on that field

If you remember back when we looked up the fields on a model, we know what options we have here. 
---
$$terminal python3.6
$$py from unicodex.models import Design
$$pyw Design._meta.get_fields()
---
$$terminal python3.6
$$py from unicodex.models import Design
$$py Design._meta.get_fields()
(&lt;django.db.models.fields.AutoField: id>,<br> 
&lt;django.db.models.fields.related.ForeignKey: vendorversion>, <br>
&lt;django.db.models.fields.related.ForeignKey: codepoint>, <br>
&lt;django.db.models.fields.files.FileField: image>)<br>
$$pyw

Note: we have four fields - a unique id, two foreign keys off to other models, and image

but name isn't there. That came from codepoint

---
$$terminal python3.6
$$py from unicodex.models import Design
$$py Design._meta.get_fields()
(&lt;django.db.models.fields.AutoField: id>,<br> 
&lt;django.db.models.fields.related.ForeignKey: vendorversion>, <br>
&lt;django.db.models.fields.related.ForeignKey: codepoint>, <br>
&lt;django.db.models.fields.files.FileField: image>)<br>
$$pyw Codepoint._meta.get_fields()

Note: so if we inspect Codepoint

---
$$terminal python3.6
$$py from unicodex.models import Design
$$py Design._meta.get_fields()
(&lt;django.db.models.fields.AutoField: id>,<br> 
&lt;django.db.models.fields.related.ForeignKey: vendorversion>, <br>
&lt;django.db.models.fields.related.ForeignKey: codepoint>, <br>
&lt;django.db.models.fields.files.FileField: image>)<br>
$$py Codepoint._meta.get_fields()
(&lt;ManyToOneRel: unicodex.design>, <br>
&lt;django.db.models.fields.AutoField: id>,<br> 
&lt;django.db.models.fields.CharField: name>, <br>
&lt;django.db.models.fields.TextField: description>,<br>
&lt;django.db.models.fields.CharField: codepoint>)<br>
$$pyw

Note: WE see that codepoint has the name field
---
<pre><code><c>&num; ORM</c>
Design.objects.filter(<o><br>&nbsp;&nbsp;&nbsp;codepoint&#95;&#95;name&equals;</o>'Sparkles')<br><br><c>&num; field, field, field... lookup</c>

Note: You'll also note in our example that we end on a field.

By default the look up is an exact match on the string. So effectively, name equals sparkles 
---
<pre><code><c>&num; ORM</c>
Design.objects.filter(<o><br>&nbsp;&nbsp;&nbsp;codepoint&#95;&#95;name&equals;</o>'Sparkles')<br><br><c>&num; field, field, field... lookup</c>
<br><c>&num; ORM</c>
Design.objects.filter(<o><br>&nbsp;&nbsp;&nbsp;codepoint&#95;&#95;name&#95;&#95;exact&equals;</o>'Sparkles')

Note: so by default what we're calling is codepoint name equals

---
$$terminal python3.6
$$py from unicodex.models import Design
$$py Design._meta.get_fields()
(&lt;django.db.models.fields.AutoField: id>,<br> 
&lt;django.db.models.fields.related.ForeignKey: vendorversion>, <br>
&lt;django.db.models.fields.related.ForeignKey: codepoint>, <br>
&lt;django.db.models.fields.files.FileField: image>)<br>
$$py Codepoint._meta.get_fields()
(&lt;ManyToOneRel: unicodex.design>, <br>
&lt;django.db.models.fields.AutoField: id>,<br> 
&lt;django.db.models.fields.CharField: name>, <br>
&lt;django.db.models.fields.TextField: description>,<br>
&lt;django.db.models.fields.CharField: codepoint>)<br>
$$pyw

Note: 

We can also forge a path down a different series of foreign keys

See the vendorversion there? Let's see what that contains
---

$$terminal python3.6
$$pyw
---
$$terminal python3.6
$$pyw from unicodex.models import VendorVersion
---

$$terminal python3.6
$$py from unicodex.models import VendorVersion
$$pyw
---
$$terminal python3.6
$$py from unicodex.models import VendorVersion
$$pyw VendorVersion._meta.get_fields()


Note: let's refresh our terminal and inspect VendorVersion

---
$$terminal python3.6
$$py from unicodex.models import VendorVersion
$$py VendorVersion._meta.get_fields()
(&lt;ManyToOneRel: unicodex.design>,<br> 
&lt;django.db.models.fields.AutoField: id>, <br>
&lt;django.db.models.fields.CharField: name>, <br>
&lt;django.db.models.fields.related.ForeignKey: vendor>)<br>
$$pyw

Note: Okay, so a vendorversion has many designs, an ID, a name, and a Vendor FK

What about Vendor?
---
$$terminal python3.6
$$py from unicodex.models import VendorVersion
$$py VendorVersion._meta.get_fields()
(&lt;ManyToOneRel: unicodex.design>,<br> 
&lt;django.db.models.fields.AutoField: id>, <br>
&lt;django.db.models.fields.CharField: name>, <br>
&lt;django.db.models.fields.related.ForeignKey: vendor>)<br>
$$pyw from unicodex.models import Vendor

---
$$terminal python3.6
$$py from unicodex.models import VendorVersion
$$py VendorVersion._meta.get_fields()
(&lt;ManyToOneRel: unicodex.design>,<br> 
&lt;django.db.models.fields.AutoField: id>, <br>
&lt;django.db.models.fields.CharField: name>, <br>
&lt;django.db.models.fields.related.ForeignKey: vendor>)<br>
$$py from unicodex.models import Vendor
$$pyw
---
$$terminal python3.6
$$py from unicodex.models import VendorVersion
$$py VendorVersion._meta.get_fields()
(&lt;ManyToOneRel: unicodex.design>,<br> 
&lt;django.db.models.fields.AutoField: id>, <br>
&lt;django.db.models.fields.CharField: name>, <br>
&lt;django.db.models.fields.related.ForeignKey: vendor>)<br>
$$py from unicodex.models import Vendor
$$pyw Vendor._meta.get_fields()


Note: clear our terminal, import Vendor, and check

---
$$terminal python3.6
$$py from unicodex.models import VendorVersion
$$py VendorVersion._meta.get_fields()
(&lt;ManyToOneRel: unicodex.design>,<br> 
&lt;django.db.models.fields.AutoField: id>, <br>
&lt;django.db.models.fields.CharField: name>, <br>
&lt;django.db.models.fields.related.ForeignKey: vendor>)<br>
$$py from unicodex.models import Vendor
$$py Vendor._meta.get_fields()
(&lt;ManyToOneRel: unicodex.vendorversion>, <br>
&lt;django.db.models.fields.AutoField: id>, <br>
&lt;django.db.models.fields.CharField: name>) <br>
$$pyw

Note: so vendor has a relationship with vendorversion, an id and a name too

And thus, we have exhausted our search, and we could build up a UML diagram showing the relationships between all the tables in this app

But I woldn't do that too you. 

Back to what we were doing, showing filter walks

---

$$terminal python3.6
$$pyw

Note: clearing our terminal again with Control L
---
$$terminal python3.6
$$pyw Design.objects.filter(

Note: we have a number of options here. Let's build the longest chain we can...

---
$$terminal python3.6
$$pyw Design.objects.filter(vendorversion

Note: Let's filter design objects where... the linked vendor version

---

$$terminal python3.6
$$pyw Design.objects.filter(vendorversion&#95;&#95;vendor


Note: and the vendor linked to that....

---
$$terminal python3.6
$$pyw Design.objects.filter(vendorversion&#95;&#95;vendor&#95;&#95;name

Note: the name of that vendor

---


$$terminal python3.6
$$pyw Design.objects.filter(vendorversion&#95;&#95;vendor&#95;&#95;name&#95;&#95;contains=

Note: contains...
---

$$terminal python3.6
$$pyw Design.objects.filter(vendorversion&#95;&#95;vendor&#95;&#95;name&#95;&#95;contains="Micro")

Note: the string Micro
---

$$terminal python3.6
$$py Design.objects.filter(vendorversion&#95;&#95;vendor&#95;&#95;name&#95;&#95;contains="Micro")
&lt;QuerySet [&lt;Design: Sparkles Microsoft - Windows 8.0>, &lt;Design: Two Hearts Microsoft - Windows 8.0>, &lt;Design: Sparkles Microsoft - Windows 8.1>, &lt;Design: Two Hearts Microsoft - Windows 8.1>, &lt;Design: Sparkles Microsoft - Windows 10>, &lt;Design: Two Hearts Microsoft - Windows 10>]><br>
$$pyw

Note: And thus, we get a of all designs where the name of the linked vendor contains Micro

---
<pre><code><c>&num; Field Lookups</c><table>
<tr><td><l>contains</l></td><td><o>LIKE "%?%"</o></td></tr>
<tr><td><l>startswith</l></td><td><o>LIKE "%?"</o></td></tr>
<tr><td><l>endswith</l></td><td><o>LIKE "?%"</o></td></tr>
<tr><td><l>in</l></td><td><o>IN (?, ?, ?, ...)</o></td></tr>
<tr><td><l>lt, le, gt, ge</l></td><td><o>&lt;, &lt;=, &gt;, &gt;=</o></td></tr>
<tr><td><l>range</l></td><td><o>BETWEEN</o></td></tr>
<tr><td><l>isnull</l></td><td><o>NULL</o></td></tr></table><c>&num; ... and many more!</c>
<span class="bfoot" style="margin-bottom: -270px"><fl>[docs - querysets field lookups](https://docs.djangoproject.com/en/2.0/ref/models/querysets/#field-lookups)</fl></span>

Note: There are other field lookups we can use for a number of differnt things. 

We're also not just limited to one filter, we can have more than one
---

$$terminal python3.6
$$pyw Design.objects.filter(vendorversion&#95;&#95;vendor&#95;&#95;name&#95;&#95;contains="Micro"

Note: instead of just filtering on Micro, we could alos
---
$$terminal python3.6
$$py Design.objects.filter(vendorversion&#95;&#95;vendor&#95;&#95;name&#95;&#95;contains="Micro",
$$pdw &nbsp;&nbsp; 
---
$$terminal python3.6
$$py Design.objects.filter(vendorversion&#95;&#95;vendor&#95;&#95;name&#95;&#95;contains="Micro", 
$$pdw &nbsp; codepoint 

---
$$terminal python3.6
$$py Design.objects.filter(vendorversion&#95;&#95;vendor&#95;&#95;name&#95;&#95;contains="Micro", 
$$pdw &nbsp; codepoint&#95;&#95;name


---
$$terminal python3.6
$$py Design.objects.filter(vendorversion&#95;&#95;vendor&#95;&#95;name&#95;&#95;contains="Micro", 
$$pdw &nbsp; codepoint&#95;&#95;name&#95;&#95;endswith 

---
$$terminal python3.6
$$py Design.objects.filter(vendorversion&#95;&#95;vendor&#95;&#95;name&#95;&#95;contains="Micro", 
$$pdw &nbsp; codepoint&#95;&#95;name&#95;&#95;endswith="Hearts") 


---
$$terminal python3.6
$$py Design.objects.filter(vendorversion&#95;&#95;vendor&#95;&#95;name&#95;&#95;contains="Micro", 
$$pd &nbsp; codepoint&#95;&#95;name&#95;&#95;endswith="Hearts") 
&lt;QuerySet [&lt;Design: Two Hearts Microsoft - Windows 10>, &lt;Design: Two Hearts Microsoft - Windows 8.1>, &lt;Design: Two Hearts Microsoft - Windows 8.0>]><br>
$$pyw

Note: we get list of designs both from a vendor 
---
##= `AND`? `OR`
Note: 

So far we've dealt with single or chained filters, which will AND together

name equals sparkles AND image ends with png AND AND AND

If we want to start using OR, we need to get a bit fancy
---
#= `Q`

Note: This is where Q comes in

No, not the race from the great Star Trek sequel, The Next Generation, 

Q and in Query
---

TODO EXPAND OUT





Book.objects.filter(name='Bible', author='God')
Book.objects.filter(name__exact='Bible', author__exact='God')

Book.objects.filter(Q(name='Bible') & Q(author='God'))

Book.objects.filter(Q(name='Bible'), author='God')

Book.objects.filter(Q(name='Bible'), Q(author='God'))

Book.objects.filter(author='God', Q(name='Bible'))  # Syntax error

Book.objects.filter(name='Bible', name='Hitchikers') # Why bother? It's always empty

Book.objects.filter(Q(name='Bible') | Q(name='Hitchikers'))

Book.objects.filter(author__name='John', author__age=42)  # One join
Book.objects.filter(author__name='John').filter(author__age=42)  # Two joins












---
##= Wanna know something really cool?
---
##= You can do this in the admin
---
#= 🤯
---

@^ djadmin.png
Note: here is the admin from earlier
One of those default apps is user authentication
---

@^ djuser_none.png
Note: if we go to the admin page for users, we see a list of users, but these filters on the right are useful for filtering
---
@^ djuser_super.png
Note: we can filter by super users
---
@^ djuser_super_h.png
Note: 

Look at the URL
It's the same filter we were hand coding

---
@^ djuser_superactive.png
Note: click on active users
and the URL changes
---
@^ djuser_superactive_h.png
Note: it now shows an and in there. 

There are limitations about how crafty you can get in the URL filter for security reasons, but basic operations work, even if there isn't any filters on the right hand side panel

TODO JB info about where/what limitations?
---
##= So, what if the ORM doesn't do it?

Note: but what if you have something reeeeeally complex, that you can't easily represent in the ORM?

---
##= `raw`
Note: If you really really really need to, you can drop down to raw SQL CODE 
---
#= ⚠️
Note: but

but but but

You need to be careful

If you look up the docs about how to do this

---
<div class="left"><span style="font-family: Roboto">Performing raw SQL queries</span><br><br>
<rr>The raw() manager ...</rr><br/>
<br>⚠️ <rb>You should be very careful whenever you write.</rb><br>
<br>`Abc.objects.raw('SELECT * FROM myapp_abc')`<br><br>
🗒  <rr>Where did the name of the Person table come from in that example?</rr>
<br>⚠️ <rb>No checking is done on the SQL statement that is passed in to .raw().</rb>
<br>⚠️ <rb>If you are performing queries on MySQL, note that MySQL’s silent type coercion may cause unexpected results when mixing types.</rb>
<br>⚠️ <rb>While a RawQuerySet instance can be iterated over like a normal QuerySet, RawQuerySet doesn’t implement </rb><br></div>

Note: you'll see it is FULL of warnings and notes and conditions

There are specific sections in the docs about how to give raw parameterised arguments to help prevent potential SQL injection, but you should still understand how this functionality works before you try using it. 

You also break the ability for your app to be used by multiple databases. Because of the differences in SQL between databases, your postgres flavoured code probably will break if someone wants to run it on an sqlite database 

---
##= Sometimes, the sequels are better.

Note: But sometimes, SQL is better 

the whole point of the ORM is in the name: the Object Relational Mapper. It's all about mapping objects to relations

the ORM can do 80% of things, but if there's stuff that's easier to do in RAW self, instead of wrangling the ORM, do that instead.

---
##= Discover more yourself
Note: I've only touched the surface of the power of the ORM

If I've caught your interest in the power of this part of django, you can learn more yourself
---
##= Creating objects
## Field Types
## Field Relationships

Note: How to create objects, including from raw SQL

Field types - things like email fields and image fields 

And more field relations, ways that you can call both codepoint attributes on a design object, and design attributes on a codepoint
---
##= <fl>docs.djangoproject.com</fl>

Note: seriously, the docs are wonderful. Now that you know some of the general terms of this bit of software, you should be able to find more interesting ways to make the ORM work for you
---
#= ☝️
##= &nbsp;
Note: Oh, and just one more note before I go
If you really want to make the ORM work well for you when developing
---

#= ☝️
##= `echo "ipython" >> Pipfile`
Note: add ipython as a dev requirement in your Pipfile, or requirements.txt or whereever all good python package managers store their requirements.
---
$$terminal python3.6
$$prompt ~
cd project<br>
$$prompt ~/project
./manage.py shell<br>
Python 3.6.3 (default, Nov  9 2017, 15:58:30)<br>
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.38)] on darwin<br>
Type "help", "copyright", "credits" or "license" for more information.<br>
(InteractiveConsole)<br>
$$w &gt;&gt;&gt;&nbsp;  

Note: it will turn your shell from this old and busted
---
$$terminal python3.6
$$prompt ~
cd project<br>
$$prompt ~/project
./manage.py shell<br>
Python 3.6.3 (default, Nov  9 2017, 15:58:30)<br>
Type 'copyright', 'credits' or 'license' for more information<br>
IPython 6.3.1 -- An enhanced Interactive Python. Type '?' for help.<br><br>
$$w <tg>In [</tg><ty>1</ty><tg>]:&nbsp; 
Note: to the new hotness

This is an ipython powered shell, which means
---
$$terminal python3.6
$$prompt ~
cd project<br>
$$prompt ~/project
./manage.py shell<br>
Python 3.6.3 (default, Nov  9 2017, 15:58:30)<br>
Type 'copyright', 'credits' or 'license' for more information<br>
IPython 6.3.1 -- An enhanced Interactive Python. Type '?' for help.<br>
<br><tg>In [</tg><ty>1</ty><tg>]: from </tg><tb>uni</tb><w>&nbsp;</w>
Note: you start typing something, press tab, and
---
$$terminal python3.6
$$prompt ~
cd project<br>
$$prompt ~/project
./manage.py shell<br>
Python 3.6.3 (default, Nov  9 2017, 15:58:30)<br>
Type 'copyright', 'credits' or 'license' for more information<br>
IPython 6.3.1 -- An enhanced Interactive Python. Type '?' for help.<br>
<br><tg>In [</tg><ty>1</ty><tg>]: from </tg><tb>uni</tb><w>&nbsp;</w>
<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  <ww>unicodedata</ww>
<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  <ww>unicodex&nbsp; &nbsp;</ww>
<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  <ww>unittest&nbsp; &nbsp;</ww>
Note: you get autocompleted suggestions. 

So cool
---

~@ hunterfound.jpg


Note: 
So, now that you have your standard issue bug catcher, you too can start bounding forward to catch that pesky bug in your code

legacy_explorer.png
---
####= &nbsp;

Note: and I say this with all due respect, but django is now boring. As I said at the start, odds are first time you interact with django in the workplace isn't going to be on a new shiny app, it'll be on something that exists. 

But that doesn't mean you can't attack the problem sideon and get in the stacks and poke around and see what django is about from the inside out. 

If you want to know more, I have a copy of the recompiler here with me, which has an article I've written called 

<br>
## &nbsp;
@= legacy3.png
vv &nbsp;
---
####= Read more
<br>
## *Why I love Legacy DevOps*
[The Recompiler, Issue 4](https://recompilermag.com/issues/issue-4/why-i-love-legacy-devops/)
Note: why I love legacy devops

It's all about how I find utmost dorkish joy in finding that odd little thing in a technology stack that just a short time ago I had no idea about. 

And being able to use your skills gained from other technology sets in new fields is really fun, sometimes a bit interesting, but always great. 

You never start form zero. 

You're just used to different critters

You just have to get used to using a different kind of net to catch them
@= legacy3.png
 -- Illustration by Victoria Wang

---
<br>
! space |  space | claps | space | space
@ footer.svg
vv Some images: [WOCinTech Chat](https://www.flickr.com/photos/wocintechchat/albums)

Note: thank you for your time
---
~@ pyconau18.png
<h2 style="color: white; margin-top: 256px">Call for Proposals Now Open</h2>
<br><br><br>
<h2 style="color: white; margin-top: 65px">pycon-au.org</h2>

Note: PS PyCon AU is a thing that's happening 
