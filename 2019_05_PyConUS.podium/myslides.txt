#= <br> A Right Stitch-up
## Creating embroidery patterns with Pillow
@ footer.svg

Note: 

FULL SCREEN ME! 

⌘  + P

Monitors wrong? ⌘ + TAB
---

##= ~~ <br>A long time ago <br> at a conference far away<br> ~~

---

~@ osdc2014.png

Note: OSDC 2014

First ever lightning talk, for the "OtherSkills lightning talks"

(5 minute lightning talks, about stuff that's not computers)

There were talks about: bread, choirs, and me, about cross-stitching 

---

~@ green_display.jpg

Note: I was talking about this cross-stitch I made

---

~@ pokebros.gif

Note: the original artwork was created by a pixel artist from Melbourne, Paul Robertson. He's known for his work on things like the Scott Pilgrim vs the World game, Mercenary Kings, and the videoclip for Architecture in Helsinki's Do the Whirlwind. 

---
~@ pokebros_green.gif

Note: Pixel art, especially those with distinct colour palettes, map really well to cross-stitching

Each  pixel maps to one stitch. 
---

~@ green_design_clip.png
Note: so you can import your design into one of the many closed-source, Windows only programs, and generate a chart for you to reference. 

Each cell has a colour and a symbol which maps to a specific thread colour. 

---

~@ green_working.jpg

Note: you then take that design, that chart, that graph, whatever you wish to call it, and one by one fill in the pattern onto your fabric, or canvas. 

---

~@ green_lynn.jpg

Note: Years after my original lightning talk, This particular design, well, all three of them, were auctioned off atht the PyLadies fundraising auction in 2017

As shown here by the wonderful Lynn Root.  

---

# &nbsp;

Note: now, as part of this lightning talk I gave, I mentioned that the program I used to take the source image and turn it into the chart in which to use as a reference for the stitching was made using a closed source, Windows-only program. 

And I said: 

---
# &nbsp; 

*"If you know anything about image manipulation, colour setting, cross stitch charts...*
--

*If there is any [FOSS] software out there please tell me.*


--

*Otherwise I will make my own,*

--
*and present it here next year"*

--

&dash; me
--
, November 2014


Note: it was my first ever lightning talk, and I made a promise. Yes, it's a bit late, but you know, a year was just an estimate.  

---
# <BR><BR> Problems to solve

Note: so, by my own unscripted ramblings 5 years ago, I set myself three problems to solve
--

### "image manipulation"

--

### "colour setting"

--

### "cross stitch charts"

---

##= Problem 1:<br>Image manipulation

Note: first step, image manipulation. 

If I'm provided an image, I want to be able to go through every pixel in the image, and work out the colour

And we can do that in Python with
---
#= `pillow`
### Python Imaging Library
---
##= `getpixel((x,y))`
---

@ getpixel/large_3x3-2.png
### 3x3.png
Note: If I have a 3x3 image, with 9 pixels, all different colours, we can use this as a solid testing platform for testing getpixel

---

@ getpixel/large_3x3-4.png
### 3x3.png

Note: the co-ordinate system in Pillow starts in the top left, and works it's way across and down
---
$$# PIL.getpixel()
.right-image[![img](images/getpixel/large_3x3-4.png)]
<BR>
py- >>> from PIL import Image
py- >>> im = Image.open("3x3.png")
py- >>>  im.getpixel((0,2))
py- (255, 0, 0, 255)
sh- #  R .white[.] G.white[.] B .white[.] A
sh <br># (0,2) == red .white[ . . . . . . ] -->

Note: 

So we can address a single pixel in an image. 

From here, we can loop through, and get the RGB values for every pixel in the image. 

This will be useful later on. 

But, onto the next problem
---
#= Problem 2:<br>Colour setting 

Note: colour setting. Yes, colour with a "U"

But first. 
---
##= Let's learn about floss
---
@= dmc-logo.jpg

Note: Dollfus-Mieg et Compagnie

Is an Alsatian textile company, founded in 1746

Not to be confused with the hiphop group. 

When I talk about DMC, I mean 
---
~@ dmc-rack.jpg
Note: this stuff. 

If you're Australian, you'll find a setup like this in your local Spotlight or Lincraft. In America, think Michaels, or Hobby Lobby
---
~@ floss_macro.jpg

Note: this is the DMC Floss, floss like the stuff you use to get food out from between yur teeth. 

DMC have hundreds of different colours, all referenced by a code, in this multitrand medium. 

Most pre-made cross-stitch charts and software will refer to DMC as the floss only

However, they sell more than Floss
---
~@ wool_macro.jpg
Note: they also sell wool. DMC Tapestry Wool is a thicker medium, and while I've been using the word "cross-stitch" so far, technically you can't really use it for Cross-stitch. 

The physical medium of these thread is interesting. 
---

#= ⊠⊠⊠
### Cross Stitch
# ⧄⧄⧄
### Half Stitch

Note: if you have a very tight canvas; in cross-stitch you'll have say an Aida 14ct Cloth, to fill a square you would use, say, three ply of the floss in a cross-pattern. Complete this around your canvas, and you fill in all the gaps  and create a complete image. 

With the wool, however, it's too thick to use 14ct. I personally work in 10ct canvas, and with this medium I can only use half-sttich. A single half-stitch fills the square, so it works at scale. 

---

~@ wool_macro.jpg

Note: but this is where the fun comes in. 

You see, floss and wool are not cross-compatible. They don't share codes, and they don't share palettes. 

And, as I said, a lot of charts only refer to the floss. So, we need to convert from floss to wool.

The colours you're seeing now are part of the set called 'Cranberry'
---

@ dmc-cranberry.png
Note: while the names aren't strictly official, the codes are important. 

There is a cross-compatibility chart, which is somewhat official as it has a terribly pjeg artefacted DMC logo, but it states that it's supposed to be used as a guide only. However, it does give us an aproximation of how to compare skeins of different medium (a skein being one 'spool')

The 'floss' from before has 600-series numbers for cranberry. And with this DF, you can see that the tapestry wool equivelent has a 7600 series

But they don't exactly match. 
---
## The Cranberries - Analyze
.right-image[![pic](images/wool_6floss_crop.jpg)]
<pre><code style="font-size: 36px; line-height: 1.5;">

V DK Cranberry&nbsp;&nbsp;600&nbsp;&nbsp;&nbsp;&nbsp;7600
DK Cranberry&nbsp; &nbsp;&nbsp;601
MD Cranberry&nbsp;&nbsp;&nbsp;&nbsp;602&nbsp;&nbsp;&nbsp;&nbsp;7603
Cranberry&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;603&nbsp;&nbsp;&nbsp;&nbsp;7604
LT Cranberry&nbsp;&nbsp;&nbsp;&nbsp;604&nbsp;&nbsp;&nbsp;&nbsp;7605
V LT Cranberry&nbsp;&nbsp;605
</code></pre>

Note: if we go through the chart, we can see that there are many more floss threads available than wool. 

For the Cranberry series, there are 6 available floss threads, but only four wool. And in this picture, my local craft-store was even completely out of one of the wool skeins. 

This out of stock issue will come up later. 

As a matter of numbers, there's on average about a 3 to 2 ratio of floss to wool mappings. 

---

## <br><BR><br> Floss → Wool ✓*
Note: so, we can, mostly, convert a floss thread to it's wool equiv. That's great. 

But we're working with computers. Pillow can get us RGB values 
--

## DMC → RGB ??

Note: so how can we 

---
#= No official mapping exists
### 'proprietary information'
.footnotes[[thread-bare.com](https://www.thread-bare.com/2017/09/20/creating-cross-stitch-charts-with-consistent-colors)]
Note: Officially there's no official mapping. 

It's 'proprietary information', colours can drift over time

Indeed, it's recommended that you buy your threads from the same dyelot to ensure they are from the same manufactured batch. 

This mades sense. This is a company trade secret, from the 1800's. 

It could allow competitors to "steal" and cheaply reproduce the colours.
---

##= however

Note: however. There are ways around this. 

You can find, with a lot of searching, someone's unofficial mapping of colours. I've used it before. 

However. 

You could always create your own. 
---

##= however

Note: 
You could go through every available thread, take a picture of the thread, work out the best colour, and go from there. 

Now, you'll have to deal with a bunch of variables

lighting, the camera being used, the environment the picture was taken. 

If these are consistent throughout the entire photoshoot, you can get a pretty good average colour. 

And even then, you should always use these sort of things as a guide only. 

The threads will change per dye lot, the colurs you have in your design may not look the nicest together. 

But it gets a lot of the job done. 

Lucky for me, since I first started looking into this problem space, DMC has updated their website. 

---

~@ dmc_floss_pink.png

Note: They have all the colours available for their threads with their codes on their website. 

We can see here, the 600 thread from the cranberry series. Except for a few things -- 

It doesn't use the names any more. 

The actual skein doesn't list any color, only the code; the color name is helpful, but is not a primary identifier. 

The other thing?

---

~@ dmc_wool_pink.png

Note: the equivelent colour in wool doesn't exist any more. 

Indeed, in the old mapping I found, there was about 450 floss threads, and just under 300 wool threads. 

According to their website now, 
---

@ dmc_floss_count.png
@ dmc_wool_count.png

Note: there's 489 floss threads, and only 100 tapestry wool threads left. 

That's not a lot.  We'll touch on this later; as both these numbers cause us issues. 

---

~@ dmc_wool_pink.png

Note: back to this page. 

we can see that they've captured both swatches and the full skein for each thread. 

From here, we can download these images, and use them to work out the average colour. 

How?

---

##= `getpixel((x,y))`
---

$$# PIL.getpixel()
.right-image[![img](images/486_e_7202_150x150.jpg)]
<BR>
py- >>> from PIL import Image
py >>> im = Image.open("486_e_7202_150x150.jpg")

Note: we can import our image like before

and then... 

--
py >>> count, r, g, b = [0,0,0,0]
py >>> for x in range(0, im.width):
py >>> &nbsp; &nbsp; for y in range(0, im.height):
py >>> &nbsp; &nbsp; &nbsp; &nbsp; i, j, k = im.getpixel((x, y))
--
py >>> &nbsp; &nbsp; &nbsp; &nbsp; r += i; g += j; b += k;
py >>> &nbsp; &nbsp; &nbsp; &nbsp; count += 1
--
py- >>> print int(r/count), int(g/count), int(b/count)
py (210, 138, 149)

---

##= <span style="color: rgb(210, 138, 149); background-color: rgb(210, 138, 149); padding: 50px">....</span>
@ 486_e_7202_150x150.jpg

Note: I mean, I guess this is pretty close?

But if we repeat this cross all the images we have access to, we can at least process them all in the same way. 


We can then get a list of color codes, and their aproxx rgb colors. 

This is useful for later. 

SO

the third issue. 



---
##= Reducing picture to only available colours

Note: We have 100 wool colours to work with. So, we need to ensure that our source images only use these colours

Thankfully, we can solve this problem with a little bit of python
---
##= `pillow`
Note: pillow, again!
---
##= `putpalette(data)`

Note: there's a tiny function in Pillow called `putpalette()` that's somewhat underdocumented. 

I'm including the code here as this is method that worked for me, and hopefully works for someone else.  
---
$$# PIL.putpalette()
<BR>
py- >>> def get_palette_image(palette):
py- >>> &nbsp; data = # [ .. ]
py- >>> &nbsp; image = Image.new("P", (16, 16))
py- >>> &nbsp; image.putpalette(data)
py- >>> &nbsp; return image

Note: we have to define a palette. Do do that, we have to set the palette on a new image. 

The data in this case is a list of 768 integers. 

That is, 256 triples of RGB values. 

---
$$# Image.im.convert()
<BR>
py- >>> im = Image.open("source.png")
py- >>> palette_image = get_palette_image(palette)
py- >>> _im = im.im.convert("P", 0, palette_image.im)
py- >>> return im._new(_im).convert("RGB")

Note: from there, we have to use the primative convert function to use our palette only. 

This isn't a typo: there is a convert function ont he image object itself, but this is the C-level convert function. I haven't found a better way to do this functionality, although I do have some activity upstream in pillow to try and resolve this. 

You may have noticed another issue here, tho

---
##= Problem: 256
Note: pillow palette limited to 256 colours. 

We have 100 colours in our Wool palette, so that's fine, we only define 100 colours, right? 

---
##= Problem: 256 exactly.
Note: Well, no. 

See, turns out here is where I was going to mention that there was this weird bug in pillow where when I defined my palette, the previous function I showed was allowing these weird grey colours to turn up. 

Turns out that the default palette for any image is a 256-length sliding greyscale. That is, RGB values 0,0,0; 1,1,1; all the way up to 255,255,255. 

Which means that if you don't override these values, you end up having greyscale colours in your resulting image. 

The solution here is to always define exactly 256 colours. In my implementation, I pad out the palette by taking whatever the last colour is and repeating that until I have a complete palette. 

---

##= Problem: 256 only.

Note: but on the other end of the scale, we have the problem that we have too many colours in our floss palette. We have 489 colours of floss, but we can only use 256. So instead of padding out our palette, we have to truncate it. 

But how can we choose what colours to remove? 

---

##= ⚠️

Note: now, this section might be a bit contraversial. 

I want to remove colours from my floss palette. 

And the problem is: all floss colours are different. Even colour that are by RGB value 'reasonably close' are in fact different colours. And removing any colours will reduce the fidelity of our image in floss. 

I understand and acknowlege this, but I mean, having too many colours vs not having enough colours? Wool stitchers have a harder time, imho. 

---

##= Reduce the colour palette. 

Note: so, to reduce our colour palette, it makes sense to prune colours that are super close to each other. 

---
@= ciede2000.jpg
## CIEDE2000
<span class="foot" style="top: 515px">[wikipedia](https://en.wikipedia.org/wiki/Color_difference)</span>

Note: Luckily there's math for that!

latest revision of the forumula from  International Commission on Illumination (CIE) 

Perceptual uniformity, in a function of colour distance. The smaller the number, the closer the colours. 

Fun fact - largely based on experience with automotive paint on smooth surfaces.

And thankfully, because this is a fairly complex formula, we don't have to try and implement it ourselves, because it's already in scikit!

---
$$# deltaE_ciede2000
<br>
sh $ pip install numpy scikit-image
sh $ python
py- >>> from skimage.color<br>&nbsp; &nbsp; &nbsp;import deltaE_ciede2000
py- >>> deltaE_ciede2000(color1, color2)
Note: praise scikit

Color 1 and color 2 must be in a specific format here, but there are conversion helps to get us from RGB
---
~@ similar-top-floss.png
Note: checking all the permutations and sorting by the smallest number from this formula, we can see which colours are extremely similar. 

What's super interesting here is when the flosses are super similar but have different numbers

---

~@ floss-comparisons.png

Note: based on the website images, we can barely see any difference between these threads. 

In these three examples, the center set are from the same series - they are 640 and 642, but the difference are so minute that they allow for some extreme precision in the artwork; but for our perposes, we could remove 

---

~@ floss-thanos.png

Note: we could go full thanos and still get a pretty good palette. 

So I took the 489 floss colours, and remove one of each of the similar pairs until I ended up with only 256 colours. 

Again, not the best solution in the world, but as I've said, I have reasons. 

---
##= Problem 3:<br>Cross-stitch charts

Note: so with our color setting problem solved, we can move onto problem three. Charts. 

Turns out, there's a, at first, simple solution to this
---
##= `<span>`

Note: HTML and span objects. 

If I just use span images with background colors, formed into rows of colours, I can create a chart. 
---
##= `box-shadow: inset 0 0 0 0.5px`

Note: and by using inset box shadows, I can have a half pixel border around every span, which when they are placed side by side by side, creates a 1 pixel border around all the cells. 

Simple right? 

Right? 

---

##= ~~`box-shadow: inset 0 0 0 0.5px`~~

Note: well, unfortunately, no, this isn't that simple. 

The problem is, of cource, because CSS, cross-browser compatibility. 

Turns out that webkit and blink browser engines intepret this differently. Blink ends up with 1px around the spans. But webkit ignores it. 

So instead: 

---

##= border-right: 1px solid black; <br>border-bottom: 1px solid black;

Note: i had to hack it up using terrible CSS. 

BUT. 


---
##= Result

Note: the result of solving all these problems is 
---
##= `pip install ih` 

Note: A pip-installable package called Ih
---
@^^ green-ih.png

Note: I can now generate a chart that looks exceedingly similar 

it also has some good features that I like, including giving me the actual amount of stitches. 

---
##= Here's something I prepared earlier. 

Note: as an example of how I can use this in practice. 

Here's something you might recognise

---

~@ pycon-banner.png

Note: The conference iconography for this year is pretty. Very pretty. And it has a distinct set of colours. Bold colours. .. We could cross-stitch this. 

---

@= pyconlogo.jpg

Note: the pycon twitter logo is a nice little square.. well circle.. representation of this ... 

We can pass it through ih and get a chart. 

--- 

# TODO - get screenshot of working pyconlogo chart

Note: using this chart, we know exactly how many stitches we need, the size of the image, etc. We can then go out and get our supplies


---

~@ pyconlogo-progress.png

Note: sit down, put on some netflix, and craft away

---

~@ pyconlogo-final.png

Note: 

And make this. 

IF AVAILABLE - show real tapestry now. 

In what is now a tradition, this tapestry will be auctioned off tomorrow night at the PyLadies charity auction. Proceeds will go to PyLadies, so if you've got a ticket, I hope to see you there!

---

~@ tinypycon10.png

Note: for smaller images, it's more useful to do manual pixel art of the source, and then feed that into ih without any scaling. I used piskel app for this, but sadly I cannot automate art. 

---

~@ tinypyconchart.png

Note: Here's the tiny pocket version, which (is going/has gone) to Ernest, the conf director.  

---
##= Practical Applications

Note: **if time permits**

You can also use this for practical applications. 

For example, say you wanted to create a scannable QR code for your home wifi
---


$$# qrcode + ih
<br>
sh $ pip install qrcode
sh $ qr "YourWifiPassword" > wifi.png
sh $ ih wifi.png -s10 -t

Note: you can use the qrcode package, generate an image of the code, then pass that into ih

---
~@ wifi-mock2.png

Note: If you stitch this, then it is scannable. I have this at home.  
---
@^^ snap.png

Note: apparently this is a really good idea, because I tweeted about it earlier last year
---
@= popular.png

Note: and it got a little bit of attention. 

So, because peer pressure, I've turned it into a service
---
##= qr.glasnt.com

Note: you can go to this URL and generate your own. 

---

##= pip install ih
## qr.glasnt.com

@ footer.svg

Note: So that's all I had. For those of you with a ticket, I hope to see you at the auction tomorrow night. 

Thank you all for your time~!


